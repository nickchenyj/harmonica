// megafunction wizard: %ALTFP_INV%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTFP_INV 

// ============================================================
// File Name: altfp_inv_ex.v
// Megafunction Name(s):
// 			ALTFP_INV
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 12.1 Build 243 01/31/2013 SP 1 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2012 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altfp_inv DEVICE_FAMILY="Stratix III" PIPELINE=20 ROUNDING="TO_NEAREST" WIDTH_EXP=8 WIDTH_MAN=23 clk_en clock data result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altfp_inv_and_or DEVICE_FAMILY="Stratix III" LUT_INPUT_COUNT=6 OPERATION="OR" PIPELINE=3 WIDTH=23 aclr clken clock data result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = reg 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_and_or
	( 
	aclr,
	clken,
	clock,
	data,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [22:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [22:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[3:0]	connection_dffe0;
	reg	[0:0]	connection_dffe1;
	reg	connection_dffe2;
	wire  [22:0]  connection_r0_w;
	wire  [3:0]  connection_r1_w;
	wire  [0:0]  connection_r2_w;
	wire  [22:0]  operation_r1_w;
	wire  [3:0]  operation_r2_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 4'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[22], operation_r1_w[17], operation_r1_w[11], operation_r1_w[5]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[3]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= connection_r2_w[0];
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		operation_r1_w = {(operation_r1_w[21] | connection_r0_w[22]), (operation_r1_w[20] | connection_r0_w[21]), (operation_r1_w[19] | connection_r0_w[20]), (operation_r1_w[18] | connection_r0_w[19]), connection_r0_w[18], (operation_r1_w[16] | connection_r0_w[17]), (operation_r1_w[15] | connection_r0_w[16]), (operation_r1_w[14] | connection_r0_w[15]), (operation_r1_w[13] | connection_r0_w[14]), (operation_r1_w[12] | connection_r0_w[13]), connection_r0_w[12], (operation_r1_w[10] | connection_r0_w[11]), (operation_r1_w[9] | connection_r0_w[10]), (operation_r1_w[8] | connection_r0_w[9]), (operation_r1_w[7] | connection_r0_w[8]), (operation_r1_w[6] | connection_r0_w[7]), connection_r0_w[6], (operation_r1_w[4] | connection_r0_w[5]), (operation_r1_w[3] | connection_r0_w[4]), (operation_r1_w[2] | connection_r0_w[3]), (operation_r1_w[1] | connection_r0_w[2]), (operation_r1_w[0] | connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[2] | connection_r1_w[3]), (operation_r2_w[1] | connection_r1_w[2]), (operation_r2_w[0] | connection_r1_w[1]), connection_r1_w[0]},
		result = connection_dffe2;
endmodule //altfp_inv_ex_altfp_inv_and_or


//altfp_inv_and_or DEVICE_FAMILY="Stratix III" LUT_INPUT_COUNT=6 OPERATION="AND" PIPELINE=3 WIDTH=23 aclr clken clock data result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = reg 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_and_or1
	( 
	aclr,
	clken,
	clock,
	data,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [22:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [22:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[3:0]	connection_dffe0;
	reg	[0:0]	connection_dffe1;
	reg	connection_dffe2;
	wire  [22:0]  connection_r0_w;
	wire  [3:0]  connection_r1_w;
	wire  [0:0]  connection_r2_w;
	wire  [22:0]  operation_r1_w;
	wire  [3:0]  operation_r2_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 4'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[22], operation_r1_w[17], operation_r1_w[11], operation_r1_w[5]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[3]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= connection_r2_w[0];
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		operation_r1_w = {(operation_r1_w[21] & connection_r0_w[22]), (operation_r1_w[20] & connection_r0_w[21]), (operation_r1_w[19] & connection_r0_w[20]), (operation_r1_w[18] & connection_r0_w[19]), connection_r0_w[18], (operation_r1_w[16] & connection_r0_w[17]), (operation_r1_w[15] & connection_r0_w[16]), (operation_r1_w[14] & connection_r0_w[15]), (operation_r1_w[13] & connection_r0_w[14]), (operation_r1_w[12] & connection_r0_w[13]), connection_r0_w[12], (operation_r1_w[10] & connection_r0_w[11]), (operation_r1_w[9] & connection_r0_w[10]), (operation_r1_w[8] & connection_r0_w[9]), (operation_r1_w[7] & connection_r0_w[8]), (operation_r1_w[6] & connection_r0_w[7]), connection_r0_w[6], (operation_r1_w[4] & connection_r0_w[5]), (operation_r1_w[3] & connection_r0_w[4]), (operation_r1_w[2] & connection_r0_w[3]), (operation_r1_w[1] & connection_r0_w[2]), (operation_r1_w[0] & connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[2] & connection_r1_w[3]), (operation_r2_w[1] & connection_r1_w[2]), (operation_r2_w[0] & connection_r1_w[1]), connection_r1_w[0]},
		result = connection_dffe2;
endmodule //altfp_inv_ex_altfp_inv_and_or1


//altfp_inv_and_or DEVICE_FAMILY="Stratix III" LUT_INPUT_COUNT=6 OPERATION="OR" PIPELINE=3 WIDTH=8 aclr clken clock data result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = reg 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_and_or12
	( 
	aclr,
	clken,
	clock,
	data,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [7:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [7:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	connection_dffe0;
	reg	[0:0]	connection_dffe1;
	reg	connection_dffe2;
	wire  [7:0]  connection_r0_w;
	wire  [1:0]  connection_r1_w;
	wire  [0:0]  connection_r2_w;
	wire  [7:0]  operation_r1_w;
	wire  [1:0]  operation_r2_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 2'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[7], operation_r1_w[5]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[1]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= connection_r2_w[0];
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		operation_r1_w = {(operation_r1_w[6] | connection_r0_w[7]), connection_r0_w[6], (operation_r1_w[4] | connection_r0_w[5]), (operation_r1_w[3] | connection_r0_w[4]), (operation_r1_w[2] | connection_r0_w[3]), (operation_r1_w[1] | connection_r0_w[2]), (operation_r1_w[0] | connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[0] | connection_r1_w[1]), connection_r1_w[0]},
		result = connection_dffe2;
endmodule //altfp_inv_ex_altfp_inv_and_or12


//altfp_inv_and_or DEVICE_FAMILY="Stratix III" LUT_INPUT_COUNT=6 OPERATION="AND" PIPELINE=3 WIDTH=8 aclr clken clock data result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = reg 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_and_or123
	( 
	aclr,
	clken,
	clock,
	data,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [7:0]  data;
	output   result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [7:0]  data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	connection_dffe0;
	reg	[0:0]	connection_dffe1;
	reg	connection_dffe2;
	wire  [7:0]  connection_r0_w;
	wire  [1:0]  connection_r1_w;
	wire  [0:0]  connection_r2_w;
	wire  [7:0]  operation_r1_w;
	wire  [1:0]  operation_r2_w;

	// synopsys translate_off
	initial
		connection_dffe0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe0 <= 2'b0;
		else if  (clken == 1'b1)   connection_dffe0 <= {operation_r1_w[7], operation_r1_w[5]};
	// synopsys translate_off
	initial
		connection_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe1 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe1 <= {operation_r2_w[1]};
	// synopsys translate_off
	initial
		connection_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) connection_dffe2 <= 1'b0;
		else if  (clken == 1'b1)   connection_dffe2 <= connection_r2_w[0];
	assign
		connection_r0_w = data,
		connection_r1_w = connection_dffe0,
		connection_r2_w = connection_dffe1,
		operation_r1_w = {(operation_r1_w[6] & connection_r0_w[7]), connection_r0_w[6], (operation_r1_w[4] & connection_r0_w[5]), (operation_r1_w[3] & connection_r0_w[4]), (operation_r1_w[2] & connection_r0_w[3]), (operation_r1_w[1] & connection_r0_w[2]), (operation_r1_w[0] & connection_r0_w[1]), connection_r0_w[0]},
		operation_r2_w = {(operation_r2_w[0] & connection_r1_w[1]), connection_r1_w[0]},
		result = connection_dffe2;
endmodule //altfp_inv_ex_altfp_inv_and_or123


//altfp_inv_csa CARRY_SELECT="YES" DEVICE_FAMILY="Stratix III" DIRECTION="SUB" PIPELINE=1 REGISTER_INPUT="NO" REPRESENTATION="UNSIGNED" WIDTH=26 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=13 aclr clken clock cout dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=13 aclr cin clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=13 aclr cin clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = lut 42 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_csa
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [25:0]  dataa;
	input   [25:0]  datab;
	output   [25:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [25:0]  dataa;
	tri0   [25:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[13:0]	wire_csa_lower_pipeline_dffe_Q;
	wire	[13:0]	wire_csa_lower_pipeline_dffe_D;
	wire	[13:0]	wire_csa_lower_result_int;
	wire	wire_csa_lower_aclr;
	wire	wire_csa_lower_clken;
	wire	wire_csa_lower_clock;
	wire	wire_csa_lower_cout;
	wire	[12:0]	wire_csa_lower_dataa;
	wire	[12:0]	wire_csa_lower_datab;
	wire	[12:0]	wire_csa_lower_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[12:0]	wire_csa_upper0_pipeline_dffe_Q;
	wire	[12:0]	wire_csa_upper0_pipeline_dffe_D;
	wire	[13:0]	wire_csa_upper0_result_int;
	wire	wire_csa_upper0_aclr;
	wire	wire_csa_upper0_cin;
	wire	wire_csa_upper0_clken;
	wire	wire_csa_upper0_clock;
	wire	[12:0]	wire_csa_upper0_dataa;
	wire	[12:0]	wire_csa_upper0_datab;
	wire	[12:0]	wire_csa_upper0_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[12:0]	wire_csa_upper1_pipeline_dffe_Q;
	wire	[12:0]	wire_csa_upper1_pipeline_dffe_D;
	wire	[13:0]	wire_csa_upper1_result_int;
	wire	wire_csa_upper1_aclr;
	wire	wire_csa_upper1_cin;
	wire	wire_csa_upper1_clken;
	wire	wire_csa_upper1_clock;
	wire	[12:0]	wire_csa_upper1_dataa;
	wire	[12:0]	wire_csa_upper1_datab;
	wire	[12:0]	wire_csa_upper1_result;
	wire  [25:0]  dataa_w;
	wire  [25:0]  datab_w;
	wire  [25:0]  result_w;

	assign
		wire_csa_lower_result_int = wire_csa_lower_dataa - wire_csa_lower_datab;
	//synopsys translate_off
	initial
		wire_csa_lower_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_csa_lower_clock or posedge wire_csa_lower_aclr)
		if (wire_csa_lower_aclr == 1'b1) wire_csa_lower_pipeline_dffe_Q <= 13'b0;
		else if (wire_csa_lower_clken == 1'b1) wire_csa_lower_pipeline_dffe_Q <= wire_csa_lower_pipeline_dffe_D;
	assign
		wire_csa_lower_result = wire_csa_lower_pipeline_dffe_Q[12:0],
		wire_csa_lower_cout = wire_csa_lower_pipeline_dffe_Q[13:13],
		wire_csa_lower_pipeline_dffe_D[13:0] = {( ~ wire_csa_lower_result_int[13:13]), wire_csa_lower_result_int[12:0]};
	assign
		wire_csa_lower_aclr = aclr,
		wire_csa_lower_clken = clken,
		wire_csa_lower_clock = clock,
		wire_csa_lower_dataa = dataa_w[12:0],
		wire_csa_lower_datab = datab_w[12:0];
	assign
		wire_csa_upper0_result_int = {wire_csa_upper0_dataa, 1'b0} - {wire_csa_upper0_datab, ( !wire_csa_upper0_cin )};
	//synopsys translate_off
	initial
		wire_csa_upper0_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_csa_upper0_clock or posedge wire_csa_upper0_aclr)
		if (wire_csa_upper0_aclr == 1'b1) wire_csa_upper0_pipeline_dffe_Q <= 13'b0;
		else if (wire_csa_upper0_clken == 1'b1) wire_csa_upper0_pipeline_dffe_Q <= wire_csa_upper0_pipeline_dffe_D;
	assign
		wire_csa_upper0_result = wire_csa_upper0_pipeline_dffe_Q[12:0],
		wire_csa_upper0_pipeline_dffe_D[12:0] = wire_csa_upper0_result_int[13:1];
	assign
		wire_csa_upper0_aclr = aclr,
		wire_csa_upper0_cin = 1'b0,
		wire_csa_upper0_clken = clken,
		wire_csa_upper0_clock = clock,
		wire_csa_upper0_dataa = dataa_w[25:13],
		wire_csa_upper0_datab = datab_w[25:13];
	assign
		wire_csa_upper1_result_int = {wire_csa_upper1_dataa, 1'b0} - {wire_csa_upper1_datab, ( !wire_csa_upper1_cin )};
	//synopsys translate_off
	initial
		wire_csa_upper1_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_csa_upper1_clock or posedge wire_csa_upper1_aclr)
		if (wire_csa_upper1_aclr == 1'b1) wire_csa_upper1_pipeline_dffe_Q <= 13'b0;
		else if (wire_csa_upper1_clken == 1'b1) wire_csa_upper1_pipeline_dffe_Q <= wire_csa_upper1_pipeline_dffe_D;
	assign
		wire_csa_upper1_result = wire_csa_upper1_pipeline_dffe_Q[12:0],
		wire_csa_upper1_pipeline_dffe_D[12:0] = wire_csa_upper1_result_int[13:1];
	assign
		wire_csa_upper1_aclr = aclr,
		wire_csa_upper1_cin = 1'b1,
		wire_csa_upper1_clken = clken,
		wire_csa_upper1_clock = clock,
		wire_csa_upper1_dataa = dataa_w[25:13],
		wire_csa_upper1_datab = datab_w[25:13];
	assign
		dataa_w = dataa,
		datab_w = datab,
		result = result_w,
		result_w = {(({13{(~ wire_csa_lower_cout)}} & wire_csa_upper0_result) | ({13{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_inv_ex_altfp_inv_csa


//altfp_inv_csa CARRY_SELECT="NO" DEVICE_FAMILY="Stratix III" DIRECTION="ADD" PIPELINE=1 REGISTER_INPUT="NO" REPRESENTATION="UNSIGNED" WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = lut 13 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_csa1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [12:0]  dataa;
	input   [12:0]  datab;
	output   [12:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [12:0]  dataa;
	tri0   [12:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[12:0]	wire_add_sub7_pipeline_dffe_Q;
	wire	[12:0]	wire_add_sub7_pipeline_dffe_D;
	wire	[12:0]	wire_add_sub7_result_int;
	wire	wire_add_sub7_aclr;
	wire	wire_add_sub7_clken;
	wire	wire_add_sub7_clock;
	wire	[12:0]	wire_add_sub7_dataa;
	wire	[12:0]	wire_add_sub7_datab;
	wire	[12:0]	wire_add_sub7_result;
	wire  [12:0]  dataa_w;
	wire  [12:0]  datab_w;
	wire  [12:0]  result_w;

	assign
		wire_add_sub7_result_int = wire_add_sub7_dataa + wire_add_sub7_datab;
	//synopsys translate_off
	initial
		wire_add_sub7_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_add_sub7_clock or posedge wire_add_sub7_aclr)
		if (wire_add_sub7_aclr == 1'b1) wire_add_sub7_pipeline_dffe_Q <= 13'b0;
		else if (wire_add_sub7_clken == 1'b1) wire_add_sub7_pipeline_dffe_Q <= wire_add_sub7_pipeline_dffe_D;
	assign
		wire_add_sub7_result = wire_add_sub7_pipeline_dffe_Q[12:0],
		wire_add_sub7_pipeline_dffe_D[12:0] = wire_add_sub7_result_int;
	assign
		wire_add_sub7_aclr = aclr,
		wire_add_sub7_clken = clken,
		wire_add_sub7_clock = clock,
		wire_add_sub7_dataa = dataa_w,
		wire_add_sub7_datab = datab_w;
	assign
		dataa_w = dataa,
		datab_w = datab,
		result = result_w,
		result_w = wire_add_sub7_result;
endmodule //altfp_inv_ex_altfp_inv_csa1


//altfp_inv_csa CARRY_SELECT="NO" DEVICE_FAMILY="Stratix III" DIRECTION="SUB" PIPELINE=1 REGISTER_INPUT="NO" REPRESENTATION="UNSIGNED" WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_altfp_inv 2013:01:31:18:05:07:SJ cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = lut 14 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv_csa12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [12:0]  dataa;
	input   [12:0]  datab;
	output   [12:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [12:0]  dataa;
	tri0   [12:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[12:0]	wire_add_sub8_pipeline_dffe_Q;
	wire	[12:0]	wire_add_sub8_pipeline_dffe_D;
	wire	[12:0]	wire_add_sub8_result_int;
	wire	wire_add_sub8_aclr;
	wire	wire_add_sub8_clken;
	wire	wire_add_sub8_clock;
	wire	[12:0]	wire_add_sub8_dataa;
	wire	[12:0]	wire_add_sub8_datab;
	wire	[12:0]	wire_add_sub8_result;
	wire  [12:0]  dataa_w;
	wire  [12:0]  datab_w;
	wire  [12:0]  result_w;

	assign
		wire_add_sub8_result_int = wire_add_sub8_dataa - wire_add_sub8_datab;
	//synopsys translate_off
	initial
		wire_add_sub8_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_add_sub8_clock or posedge wire_add_sub8_aclr)
		if (wire_add_sub8_aclr == 1'b1) wire_add_sub8_pipeline_dffe_Q <= 13'b0;
		else if (wire_add_sub8_clken == 1'b1) wire_add_sub8_pipeline_dffe_Q <= wire_add_sub8_pipeline_dffe_D;
	assign
		wire_add_sub8_result = wire_add_sub8_pipeline_dffe_Q[12:0],
		wire_add_sub8_pipeline_dffe_D[12:0] = wire_add_sub8_result_int;
	assign
		wire_add_sub8_aclr = aclr,
		wire_add_sub8_clken = clken,
		wire_add_sub8_clock = clock,
		wire_add_sub8_dataa = dataa_w,
		wire_add_sub8_datab = datab_w;
	assign
		dataa_w = dataa,
		datab_w = datab,
		result = result_w,
		result_w = wire_add_sub8_result;
endmodule //altfp_inv_ex_altfp_inv_csa12


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=7 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=9 ONE_INPUT_IS_CONSTANT="YES" aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Stratix III" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=13 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Stratix III" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=9 aclr ageb clken clock dataa datab
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_compare 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Stratix III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=24 LPM_WIDTHB=13 LPM_WIDTHP=37 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = dsp_18bit 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_mult
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [23:0]  dataa;
	input   [12:0]  datab;
	output   [36:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [35:0]   wire_mac_mult10_dataout;
	wire  [35:0]   wire_mac_mult11_dataout;
	wire  [35:0]   wire_mac_mult12_dataout;
	wire  [35:0]   wire_mac_mult9_dataout;
	wire  [71:0]   wire_mac_out13_dataout;

	stratixiii_mac_mult   mac_mult10
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[23:6]),
	.datab({datab, {5{1'b0}}}),
	.dataout(wire_mac_mult10_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult10.dataa_clear = "0",
		mac_mult10.dataa_clock = "0",
		mac_mult10.dataa_width = 18,
		mac_mult10.datab_clear = "0",
		mac_mult10.datab_clock = "0",
		mac_mult10.datab_width = 18,
		mac_mult10.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult11
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[23:6]),
	.datab({18{1'b0}}),
	.dataout(wire_mac_mult11_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult11.dataa_clear = "0",
		mac_mult11.dataa_clock = "0",
		mac_mult11.dataa_width = 18,
		mac_mult11.datab_clear = "0",
		mac_mult11.datab_clock = "0",
		mac_mult11.datab_width = 18,
		mac_mult11.signb_internally_grounded = "true",
		mac_mult11.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult12
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[5:0], {12{1'b0}}}),
	.datab({datab, {5{1'b0}}}),
	.dataout(wire_mac_mult12_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult12.dataa_clear = "0",
		mac_mult12.dataa_clock = "0",
		mac_mult12.dataa_width = 18,
		mac_mult12.datab_clear = "0",
		mac_mult12.datab_clock = "0",
		mac_mult12.datab_width = 18,
		mac_mult12.signa_internally_grounded = "true",
		mac_mult12.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult9
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[5:0], {12{1'b0}}}),
	.datab({18{1'b0}}),
	.dataout(wire_mac_mult9_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult9.dataa_clear = "0",
		mac_mult9.dataa_clock = "0",
		mac_mult9.dataa_width = 18,
		mac_mult9.datab_clear = "0",
		mac_mult9.datab_clock = "0",
		mac_mult9.datab_width = 18,
		mac_mult9.signa_internally_grounded = "true",
		mac_mult9.signb_internally_grounded = "true",
		mac_mult9.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_out   mac_out13
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(wire_mac_mult10_dataout),
	.datab(wire_mac_mult12_dataout),
	.datac(wire_mac_mult11_dataout),
	.datad(wire_mac_mult9_dataout),
	.dataout(wire_mac_out13_dataout),
	.dftout(),
	.ena({4{clken}}),
	.loopbackout(),
	.overflow(),
	.saturatechainoutoverflow(),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.chainin({1{1'b0}}),
	.rotate(1'b0),
	.round(1'b0),
	.roundchainout(1'b0),
	.saturate(1'b0),
	.saturatechainout(1'b0),
	.shiftright(1'b0),
	.zeroacc(1'b0),
	.zerochainout(1'b0),
	.zeroloopback(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out13.dataa_width = 36,
		mac_out13.datab_width = 36,
		mac_out13.datac_width = 36,
		mac_out13.datad_width = 36,
		mac_out13.dataout_width = 72,
		mac_out13.first_adder0_clear = "0",
		mac_out13.first_adder0_clock = "0",
		mac_out13.first_adder1_clear = "0",
		mac_out13.first_adder1_clock = "0",
		mac_out13.operation_mode = "36_bit_multiply",
		mac_out13.output_clear = "0",
		mac_out13.output_clock = "0",
		mac_out13.lpm_type = "stratixiii_mac_out";
	assign
		result = wire_mac_out13_dataout[71:35];
endmodule //altfp_inv_ex_mult


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Stratix III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=24 LPM_WIDTHB=25 LPM_WIDTHP=49 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = dsp_18bit 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_mult1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [23:0]  dataa;
	input   [24:0]  datab;
	output   [48:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [35:0]   wire_mac_mult14_dataout;
	wire  [35:0]   wire_mac_mult15_dataout;
	wire  [35:0]   wire_mac_mult16_dataout;
	wire  [35:0]   wire_mac_mult17_dataout;
	wire  [71:0]   wire_mac_out18_dataout;

	stratixiii_mac_mult   mac_mult14
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[5:0], {12{1'b0}}}),
	.datab({datab[6:0], {11{1'b0}}}),
	.dataout(wire_mac_mult14_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult14.dataa_clear = "0",
		mac_mult14.dataa_clock = "0",
		mac_mult14.dataa_width = 18,
		mac_mult14.datab_clear = "0",
		mac_mult14.datab_clock = "0",
		mac_mult14.datab_width = 18,
		mac_mult14.signa_internally_grounded = "true",
		mac_mult14.signb_internally_grounded = "true",
		mac_mult14.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult15
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[23:6]),
	.datab(datab[24:7]),
	.dataout(wire_mac_mult15_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult15.dataa_clear = "0",
		mac_mult15.dataa_clock = "0",
		mac_mult15.dataa_width = 18,
		mac_mult15.datab_clear = "0",
		mac_mult15.datab_clock = "0",
		mac_mult15.datab_width = 18,
		mac_mult15.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult16
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[23:6]),
	.datab({datab[6:0], {11{1'b0}}}),
	.dataout(wire_mac_mult16_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult16.dataa_clear = "0",
		mac_mult16.dataa_clock = "0",
		mac_mult16.dataa_width = 18,
		mac_mult16.datab_clear = "0",
		mac_mult16.datab_clock = "0",
		mac_mult16.datab_width = 18,
		mac_mult16.signb_internally_grounded = "true",
		mac_mult16.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult17
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[5:0], {12{1'b0}}}),
	.datab(datab[24:7]),
	.dataout(wire_mac_mult17_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult17.dataa_clear = "0",
		mac_mult17.dataa_clock = "0",
		mac_mult17.dataa_width = 18,
		mac_mult17.datab_clear = "0",
		mac_mult17.datab_clock = "0",
		mac_mult17.datab_width = 18,
		mac_mult17.signa_internally_grounded = "true",
		mac_mult17.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_out   mac_out18
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(wire_mac_mult15_dataout),
	.datab(wire_mac_mult17_dataout),
	.datac(wire_mac_mult16_dataout),
	.datad(wire_mac_mult14_dataout),
	.dataout(wire_mac_out18_dataout),
	.dftout(),
	.ena({4{clken}}),
	.loopbackout(),
	.overflow(),
	.saturatechainoutoverflow(),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.chainin({1{1'b0}}),
	.rotate(1'b0),
	.round(1'b0),
	.roundchainout(1'b0),
	.saturate(1'b0),
	.saturatechainout(1'b0),
	.shiftright(1'b0),
	.zeroacc(1'b0),
	.zerochainout(1'b0),
	.zeroloopback(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out18.dataa_width = 36,
		mac_out18.datab_width = 36,
		mac_out18.datac_width = 36,
		mac_out18.datad_width = 36,
		mac_out18.dataout_width = 72,
		mac_out18.first_adder0_clear = "0",
		mac_out18.first_adder0_clock = "0",
		mac_out18.first_adder1_clear = "0",
		mac_out18.first_adder1_clock = "0",
		mac_out18.operation_mode = "36_bit_multiply",
		mac_out18.output_clear = "0",
		mac_out18.output_clock = "0",
		mac_out18.lpm_type = "stratixiii_mac_out";
	assign
		result = wire_mac_out18_dataout[71:23];
endmodule //altfp_inv_ex_mult1


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Stratix III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=25 LPM_WIDTHB=13 LPM_WIDTHP=38 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = dsp_18bit 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_mult12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [24:0]  dataa;
	input   [12:0]  datab;
	output   [37:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [35:0]   wire_mac_mult19_dataout;
	wire  [35:0]   wire_mac_mult20_dataout;
	wire  [35:0]   wire_mac_mult21_dataout;
	wire  [35:0]   wire_mac_mult22_dataout;
	wire  [71:0]   wire_mac_out23_dataout;

	stratixiii_mac_mult   mac_mult19
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[6:0], {11{1'b0}}}),
	.datab({18{1'b0}}),
	.dataout(wire_mac_mult19_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult19.dataa_clear = "0",
		mac_mult19.dataa_clock = "0",
		mac_mult19.dataa_width = 18,
		mac_mult19.datab_clear = "0",
		mac_mult19.datab_clock = "0",
		mac_mult19.datab_width = 18,
		mac_mult19.signa_internally_grounded = "true",
		mac_mult19.signb_internally_grounded = "true",
		mac_mult19.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult20
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[24:7]),
	.datab({datab, {5{1'b0}}}),
	.dataout(wire_mac_mult20_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult20.dataa_clear = "0",
		mac_mult20.dataa_clock = "0",
		mac_mult20.dataa_width = 18,
		mac_mult20.datab_clear = "0",
		mac_mult20.datab_clock = "0",
		mac_mult20.datab_width = 18,
		mac_mult20.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult21
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[24:7]),
	.datab({18{1'b0}}),
	.dataout(wire_mac_mult21_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult21.dataa_clear = "0",
		mac_mult21.dataa_clock = "0",
		mac_mult21.dataa_width = 18,
		mac_mult21.datab_clear = "0",
		mac_mult21.datab_clock = "0",
		mac_mult21.datab_width = 18,
		mac_mult21.signb_internally_grounded = "true",
		mac_mult21.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult22
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[6:0], {11{1'b0}}}),
	.datab({datab, {5{1'b0}}}),
	.dataout(wire_mac_mult22_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult22.dataa_clear = "0",
		mac_mult22.dataa_clock = "0",
		mac_mult22.dataa_width = 18,
		mac_mult22.datab_clear = "0",
		mac_mult22.datab_clock = "0",
		mac_mult22.datab_width = 18,
		mac_mult22.signa_internally_grounded = "true",
		mac_mult22.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_out   mac_out23
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(wire_mac_mult20_dataout),
	.datab(wire_mac_mult22_dataout),
	.datac(wire_mac_mult21_dataout),
	.datad(wire_mac_mult19_dataout),
	.dataout(wire_mac_out23_dataout),
	.dftout(),
	.ena({4{clken}}),
	.loopbackout(),
	.overflow(),
	.saturatechainoutoverflow(),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.chainin({1{1'b0}}),
	.rotate(1'b0),
	.round(1'b0),
	.roundchainout(1'b0),
	.saturate(1'b0),
	.saturatechainout(1'b0),
	.shiftright(1'b0),
	.zeroacc(1'b0),
	.zerochainout(1'b0),
	.zeroloopback(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out23.dataa_width = 36,
		mac_out23.datab_width = 36,
		mac_out23.datac_width = 36,
		mac_out23.datad_width = 36,
		mac_out23.dataout_width = 72,
		mac_out23.first_adder0_clear = "0",
		mac_out23.first_adder0_clock = "0",
		mac_out23.first_adder1_clear = "0",
		mac_out23.first_adder1_clock = "0",
		mac_out23.operation_mode = "36_bit_multiply",
		mac_out23.output_clear = "0",
		mac_out23.output_clock = "0",
		mac_out23.lpm_type = "stratixiii_mac_out";
	assign
		result = wire_mac_out23_dataout[71:34];
endmodule //altfp_inv_ex_mult12


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Stratix III" LPM_PIPELINE=3 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=25 LPM_WIDTHB=25 LPM_WIDTHP=50 aclr clken clock dataa datab result
//VERSION_BEGIN 12.1SP1 cbx_cycloneii 2013:01:31:18:05:07:SJ cbx_lpm_add_sub 2013:01:31:18:05:07:SJ cbx_lpm_mult 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ cbx_padd 2013:01:31:18:05:07:SJ cbx_stratix 2013:01:31:18:05:07:SJ cbx_stratixii 2013:01:31:18:05:07:SJ cbx_util_mgl 2013:01:31:18:05:07:SJ  VERSION_END

//synthesis_resources = dsp_18bit 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_mult123
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [24:0]  dataa;
	input   [24:0]  datab;
	output   [49:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [35:0]   wire_mac_mult24_dataout;
	wire  [35:0]   wire_mac_mult25_dataout;
	wire  [35:0]   wire_mac_mult26_dataout;
	wire  [35:0]   wire_mac_mult27_dataout;
	wire  [71:0]   wire_mac_out28_dataout;

	stratixiii_mac_mult   mac_mult24
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[6:0], {11{1'b0}}}),
	.datab({datab[6:0], {11{1'b0}}}),
	.dataout(wire_mac_mult24_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult24.dataa_clear = "0",
		mac_mult24.dataa_clock = "0",
		mac_mult24.dataa_width = 18,
		mac_mult24.datab_clear = "0",
		mac_mult24.datab_clock = "0",
		mac_mult24.datab_width = 18,
		mac_mult24.signa_internally_grounded = "true",
		mac_mult24.signb_internally_grounded = "true",
		mac_mult24.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult25
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[24:7]),
	.datab(datab[24:7]),
	.dataout(wire_mac_mult25_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult25.dataa_clear = "0",
		mac_mult25.dataa_clock = "0",
		mac_mult25.dataa_width = 18,
		mac_mult25.datab_clear = "0",
		mac_mult25.datab_clock = "0",
		mac_mult25.datab_width = 18,
		mac_mult25.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult26
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(dataa[24:7]),
	.datab({datab[6:0], {11{1'b0}}}),
	.dataout(wire_mac_mult26_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult26.dataa_clear = "0",
		mac_mult26.dataa_clock = "0",
		mac_mult26.dataa_width = 18,
		mac_mult26.datab_clear = "0",
		mac_mult26.datab_clock = "0",
		mac_mult26.datab_width = 18,
		mac_mult26.signb_internally_grounded = "true",
		mac_mult26.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_mult   mac_mult27
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa({dataa[6:0], {11{1'b0}}}),
	.datab(datab[24:7]),
	.dataout(wire_mac_mult27_dataout),
	.ena({4{clken}}),
	.scanouta(),
	.signa(1'b0),
	.signb(1'b0)
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult27.dataa_clear = "0",
		mac_mult27.dataa_clock = "0",
		mac_mult27.dataa_width = 18,
		mac_mult27.datab_clear = "0",
		mac_mult27.datab_clock = "0",
		mac_mult27.datab_width = 18,
		mac_mult27.signa_internally_grounded = "true",
		mac_mult27.lpm_type = "stratixiii_mac_mult";
	stratixiii_mac_out   mac_out28
	( 
	.aclr({4{aclr}}),
	.clk({4{clock}}),
	.dataa(wire_mac_mult25_dataout),
	.datab(wire_mac_mult27_dataout),
	.datac(wire_mac_mult26_dataout),
	.datad(wire_mac_mult24_dataout),
	.dataout(wire_mac_out28_dataout),
	.dftout(),
	.ena({4{clken}}),
	.loopbackout(),
	.overflow(),
	.saturatechainoutoverflow(),
	.signa(1'b0),
	.signb(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.chainin({1{1'b0}}),
	.rotate(1'b0),
	.round(1'b0),
	.roundchainout(1'b0),
	.saturate(1'b0),
	.saturatechainout(1'b0),
	.shiftright(1'b0),
	.zeroacc(1'b0),
	.zerochainout(1'b0),
	.zeroloopback(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out28.dataa_width = 36,
		mac_out28.datab_width = 36,
		mac_out28.datac_width = 36,
		mac_out28.datad_width = 36,
		mac_out28.dataout_width = 72,
		mac_out28.first_adder0_clear = "0",
		mac_out28.first_adder0_clock = "0",
		mac_out28.first_adder1_clear = "0",
		mac_out28.first_adder1_clock = "0",
		mac_out28.operation_mode = "36_bit_multiply",
		mac_out28.output_clear = "0",
		mac_out28.output_clock = "0",
		mac_out28.lpm_type = "stratixiii_mac_out";
	assign
		result = wire_mac_out28_dataout[71:22];
endmodule //altfp_inv_ex_mult123


//lpm_mux DEVICE_FAMILY="Stratix III" LPM_PIPELINE=1 LPM_SIZE=32 LPM_WIDTH=16 LPM_WIDTHS=5 aclr clken clock data result sel
//VERSION_BEGIN 12.1SP1 cbx_lpm_mux 2013:01:31:18:05:07:SJ cbx_mgl 2013:01:31:18:08:27:SJ  VERSION_END

//synthesis_resources = lut 166 reg 16 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_mux
	( 
	aclr,
	clken,
	clock,
	data,
	result,
	sel) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [511:0]  data;
	output   [15:0]  result;
	input   [4:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [511:0]  data;
	tri0   [4:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[15:0]	external_reg;
	wire	wire_l1_w0_n0_mux_dataout;
	wire	wire_l1_w0_n10_mux_dataout;
	wire	wire_l1_w0_n11_mux_dataout;
	wire	wire_l1_w0_n12_mux_dataout;
	wire	wire_l1_w0_n13_mux_dataout;
	wire	wire_l1_w0_n14_mux_dataout;
	wire	wire_l1_w0_n15_mux_dataout;
	wire	wire_l1_w0_n1_mux_dataout;
	wire	wire_l1_w0_n2_mux_dataout;
	wire	wire_l1_w0_n3_mux_dataout;
	wire	wire_l1_w0_n4_mux_dataout;
	wire	wire_l1_w0_n5_mux_dataout;
	wire	wire_l1_w0_n6_mux_dataout;
	wire	wire_l1_w0_n7_mux_dataout;
	wire	wire_l1_w0_n8_mux_dataout;
	wire	wire_l1_w0_n9_mux_dataout;
	wire	wire_l1_w10_n0_mux_dataout;
	wire	wire_l1_w10_n10_mux_dataout;
	wire	wire_l1_w10_n11_mux_dataout;
	wire	wire_l1_w10_n12_mux_dataout;
	wire	wire_l1_w10_n13_mux_dataout;
	wire	wire_l1_w10_n14_mux_dataout;
	wire	wire_l1_w10_n15_mux_dataout;
	wire	wire_l1_w10_n1_mux_dataout;
	wire	wire_l1_w10_n2_mux_dataout;
	wire	wire_l1_w10_n3_mux_dataout;
	wire	wire_l1_w10_n4_mux_dataout;
	wire	wire_l1_w10_n5_mux_dataout;
	wire	wire_l1_w10_n6_mux_dataout;
	wire	wire_l1_w10_n7_mux_dataout;
	wire	wire_l1_w10_n8_mux_dataout;
	wire	wire_l1_w10_n9_mux_dataout;
	wire	wire_l1_w11_n0_mux_dataout;
	wire	wire_l1_w11_n10_mux_dataout;
	wire	wire_l1_w11_n11_mux_dataout;
	wire	wire_l1_w11_n12_mux_dataout;
	wire	wire_l1_w11_n13_mux_dataout;
	wire	wire_l1_w11_n14_mux_dataout;
	wire	wire_l1_w11_n15_mux_dataout;
	wire	wire_l1_w11_n1_mux_dataout;
	wire	wire_l1_w11_n2_mux_dataout;
	wire	wire_l1_w11_n3_mux_dataout;
	wire	wire_l1_w11_n4_mux_dataout;
	wire	wire_l1_w11_n5_mux_dataout;
	wire	wire_l1_w11_n6_mux_dataout;
	wire	wire_l1_w11_n7_mux_dataout;
	wire	wire_l1_w11_n8_mux_dataout;
	wire	wire_l1_w11_n9_mux_dataout;
	wire	wire_l1_w12_n0_mux_dataout;
	wire	wire_l1_w12_n10_mux_dataout;
	wire	wire_l1_w12_n11_mux_dataout;
	wire	wire_l1_w12_n12_mux_dataout;
	wire	wire_l1_w12_n13_mux_dataout;
	wire	wire_l1_w12_n14_mux_dataout;
	wire	wire_l1_w12_n15_mux_dataout;
	wire	wire_l1_w12_n1_mux_dataout;
	wire	wire_l1_w12_n2_mux_dataout;
	wire	wire_l1_w12_n3_mux_dataout;
	wire	wire_l1_w12_n4_mux_dataout;
	wire	wire_l1_w12_n5_mux_dataout;
	wire	wire_l1_w12_n6_mux_dataout;
	wire	wire_l1_w12_n7_mux_dataout;
	wire	wire_l1_w12_n8_mux_dataout;
	wire	wire_l1_w12_n9_mux_dataout;
	wire	wire_l1_w13_n0_mux_dataout;
	wire	wire_l1_w13_n10_mux_dataout;
	wire	wire_l1_w13_n11_mux_dataout;
	wire	wire_l1_w13_n12_mux_dataout;
	wire	wire_l1_w13_n13_mux_dataout;
	wire	wire_l1_w13_n14_mux_dataout;
	wire	wire_l1_w13_n15_mux_dataout;
	wire	wire_l1_w13_n1_mux_dataout;
	wire	wire_l1_w13_n2_mux_dataout;
	wire	wire_l1_w13_n3_mux_dataout;
	wire	wire_l1_w13_n4_mux_dataout;
	wire	wire_l1_w13_n5_mux_dataout;
	wire	wire_l1_w13_n6_mux_dataout;
	wire	wire_l1_w13_n7_mux_dataout;
	wire	wire_l1_w13_n8_mux_dataout;
	wire	wire_l1_w13_n9_mux_dataout;
	wire	wire_l1_w14_n0_mux_dataout;
	wire	wire_l1_w14_n10_mux_dataout;
	wire	wire_l1_w14_n11_mux_dataout;
	wire	wire_l1_w14_n12_mux_dataout;
	wire	wire_l1_w14_n13_mux_dataout;
	wire	wire_l1_w14_n14_mux_dataout;
	wire	wire_l1_w14_n15_mux_dataout;
	wire	wire_l1_w14_n1_mux_dataout;
	wire	wire_l1_w14_n2_mux_dataout;
	wire	wire_l1_w14_n3_mux_dataout;
	wire	wire_l1_w14_n4_mux_dataout;
	wire	wire_l1_w14_n5_mux_dataout;
	wire	wire_l1_w14_n6_mux_dataout;
	wire	wire_l1_w14_n7_mux_dataout;
	wire	wire_l1_w14_n8_mux_dataout;
	wire	wire_l1_w14_n9_mux_dataout;
	wire	wire_l1_w15_n0_mux_dataout;
	wire	wire_l1_w15_n10_mux_dataout;
	wire	wire_l1_w15_n11_mux_dataout;
	wire	wire_l1_w15_n12_mux_dataout;
	wire	wire_l1_w15_n13_mux_dataout;
	wire	wire_l1_w15_n14_mux_dataout;
	wire	wire_l1_w15_n15_mux_dataout;
	wire	wire_l1_w15_n1_mux_dataout;
	wire	wire_l1_w15_n2_mux_dataout;
	wire	wire_l1_w15_n3_mux_dataout;
	wire	wire_l1_w15_n4_mux_dataout;
	wire	wire_l1_w15_n5_mux_dataout;
	wire	wire_l1_w15_n6_mux_dataout;
	wire	wire_l1_w15_n7_mux_dataout;
	wire	wire_l1_w15_n8_mux_dataout;
	wire	wire_l1_w15_n9_mux_dataout;
	wire	wire_l1_w1_n0_mux_dataout;
	wire	wire_l1_w1_n10_mux_dataout;
	wire	wire_l1_w1_n11_mux_dataout;
	wire	wire_l1_w1_n12_mux_dataout;
	wire	wire_l1_w1_n13_mux_dataout;
	wire	wire_l1_w1_n14_mux_dataout;
	wire	wire_l1_w1_n15_mux_dataout;
	wire	wire_l1_w1_n1_mux_dataout;
	wire	wire_l1_w1_n2_mux_dataout;
	wire	wire_l1_w1_n3_mux_dataout;
	wire	wire_l1_w1_n4_mux_dataout;
	wire	wire_l1_w1_n5_mux_dataout;
	wire	wire_l1_w1_n6_mux_dataout;
	wire	wire_l1_w1_n7_mux_dataout;
	wire	wire_l1_w1_n8_mux_dataout;
	wire	wire_l1_w1_n9_mux_dataout;
	wire	wire_l1_w2_n0_mux_dataout;
	wire	wire_l1_w2_n10_mux_dataout;
	wire	wire_l1_w2_n11_mux_dataout;
	wire	wire_l1_w2_n12_mux_dataout;
	wire	wire_l1_w2_n13_mux_dataout;
	wire	wire_l1_w2_n14_mux_dataout;
	wire	wire_l1_w2_n15_mux_dataout;
	wire	wire_l1_w2_n1_mux_dataout;
	wire	wire_l1_w2_n2_mux_dataout;
	wire	wire_l1_w2_n3_mux_dataout;
	wire	wire_l1_w2_n4_mux_dataout;
	wire	wire_l1_w2_n5_mux_dataout;
	wire	wire_l1_w2_n6_mux_dataout;
	wire	wire_l1_w2_n7_mux_dataout;
	wire	wire_l1_w2_n8_mux_dataout;
	wire	wire_l1_w2_n9_mux_dataout;
	wire	wire_l1_w3_n0_mux_dataout;
	wire	wire_l1_w3_n10_mux_dataout;
	wire	wire_l1_w3_n11_mux_dataout;
	wire	wire_l1_w3_n12_mux_dataout;
	wire	wire_l1_w3_n13_mux_dataout;
	wire	wire_l1_w3_n14_mux_dataout;
	wire	wire_l1_w3_n15_mux_dataout;
	wire	wire_l1_w3_n1_mux_dataout;
	wire	wire_l1_w3_n2_mux_dataout;
	wire	wire_l1_w3_n3_mux_dataout;
	wire	wire_l1_w3_n4_mux_dataout;
	wire	wire_l1_w3_n5_mux_dataout;
	wire	wire_l1_w3_n6_mux_dataout;
	wire	wire_l1_w3_n7_mux_dataout;
	wire	wire_l1_w3_n8_mux_dataout;
	wire	wire_l1_w3_n9_mux_dataout;
	wire	wire_l1_w4_n0_mux_dataout;
	wire	wire_l1_w4_n10_mux_dataout;
	wire	wire_l1_w4_n11_mux_dataout;
	wire	wire_l1_w4_n12_mux_dataout;
	wire	wire_l1_w4_n13_mux_dataout;
	wire	wire_l1_w4_n14_mux_dataout;
	wire	wire_l1_w4_n15_mux_dataout;
	wire	wire_l1_w4_n1_mux_dataout;
	wire	wire_l1_w4_n2_mux_dataout;
	wire	wire_l1_w4_n3_mux_dataout;
	wire	wire_l1_w4_n4_mux_dataout;
	wire	wire_l1_w4_n5_mux_dataout;
	wire	wire_l1_w4_n6_mux_dataout;
	wire	wire_l1_w4_n7_mux_dataout;
	wire	wire_l1_w4_n8_mux_dataout;
	wire	wire_l1_w4_n9_mux_dataout;
	wire	wire_l1_w5_n0_mux_dataout;
	wire	wire_l1_w5_n10_mux_dataout;
	wire	wire_l1_w5_n11_mux_dataout;
	wire	wire_l1_w5_n12_mux_dataout;
	wire	wire_l1_w5_n13_mux_dataout;
	wire	wire_l1_w5_n14_mux_dataout;
	wire	wire_l1_w5_n15_mux_dataout;
	wire	wire_l1_w5_n1_mux_dataout;
	wire	wire_l1_w5_n2_mux_dataout;
	wire	wire_l1_w5_n3_mux_dataout;
	wire	wire_l1_w5_n4_mux_dataout;
	wire	wire_l1_w5_n5_mux_dataout;
	wire	wire_l1_w5_n6_mux_dataout;
	wire	wire_l1_w5_n7_mux_dataout;
	wire	wire_l1_w5_n8_mux_dataout;
	wire	wire_l1_w5_n9_mux_dataout;
	wire	wire_l1_w6_n0_mux_dataout;
	wire	wire_l1_w6_n10_mux_dataout;
	wire	wire_l1_w6_n11_mux_dataout;
	wire	wire_l1_w6_n12_mux_dataout;
	wire	wire_l1_w6_n13_mux_dataout;
	wire	wire_l1_w6_n14_mux_dataout;
	wire	wire_l1_w6_n15_mux_dataout;
	wire	wire_l1_w6_n1_mux_dataout;
	wire	wire_l1_w6_n2_mux_dataout;
	wire	wire_l1_w6_n3_mux_dataout;
	wire	wire_l1_w6_n4_mux_dataout;
	wire	wire_l1_w6_n5_mux_dataout;
	wire	wire_l1_w6_n6_mux_dataout;
	wire	wire_l1_w6_n7_mux_dataout;
	wire	wire_l1_w6_n8_mux_dataout;
	wire	wire_l1_w6_n9_mux_dataout;
	wire	wire_l1_w7_n0_mux_dataout;
	wire	wire_l1_w7_n10_mux_dataout;
	wire	wire_l1_w7_n11_mux_dataout;
	wire	wire_l1_w7_n12_mux_dataout;
	wire	wire_l1_w7_n13_mux_dataout;
	wire	wire_l1_w7_n14_mux_dataout;
	wire	wire_l1_w7_n15_mux_dataout;
	wire	wire_l1_w7_n1_mux_dataout;
	wire	wire_l1_w7_n2_mux_dataout;
	wire	wire_l1_w7_n3_mux_dataout;
	wire	wire_l1_w7_n4_mux_dataout;
	wire	wire_l1_w7_n5_mux_dataout;
	wire	wire_l1_w7_n6_mux_dataout;
	wire	wire_l1_w7_n7_mux_dataout;
	wire	wire_l1_w7_n8_mux_dataout;
	wire	wire_l1_w7_n9_mux_dataout;
	wire	wire_l1_w8_n0_mux_dataout;
	wire	wire_l1_w8_n10_mux_dataout;
	wire	wire_l1_w8_n11_mux_dataout;
	wire	wire_l1_w8_n12_mux_dataout;
	wire	wire_l1_w8_n13_mux_dataout;
	wire	wire_l1_w8_n14_mux_dataout;
	wire	wire_l1_w8_n15_mux_dataout;
	wire	wire_l1_w8_n1_mux_dataout;
	wire	wire_l1_w8_n2_mux_dataout;
	wire	wire_l1_w8_n3_mux_dataout;
	wire	wire_l1_w8_n4_mux_dataout;
	wire	wire_l1_w8_n5_mux_dataout;
	wire	wire_l1_w8_n6_mux_dataout;
	wire	wire_l1_w8_n7_mux_dataout;
	wire	wire_l1_w8_n8_mux_dataout;
	wire	wire_l1_w8_n9_mux_dataout;
	wire	wire_l1_w9_n0_mux_dataout;
	wire	wire_l1_w9_n10_mux_dataout;
	wire	wire_l1_w9_n11_mux_dataout;
	wire	wire_l1_w9_n12_mux_dataout;
	wire	wire_l1_w9_n13_mux_dataout;
	wire	wire_l1_w9_n14_mux_dataout;
	wire	wire_l1_w9_n15_mux_dataout;
	wire	wire_l1_w9_n1_mux_dataout;
	wire	wire_l1_w9_n2_mux_dataout;
	wire	wire_l1_w9_n3_mux_dataout;
	wire	wire_l1_w9_n4_mux_dataout;
	wire	wire_l1_w9_n5_mux_dataout;
	wire	wire_l1_w9_n6_mux_dataout;
	wire	wire_l1_w9_n7_mux_dataout;
	wire	wire_l1_w9_n8_mux_dataout;
	wire	wire_l1_w9_n9_mux_dataout;
	wire	wire_l2_w0_n0_mux_dataout;
	wire	wire_l2_w0_n1_mux_dataout;
	wire	wire_l2_w0_n2_mux_dataout;
	wire	wire_l2_w0_n3_mux_dataout;
	wire	wire_l2_w0_n4_mux_dataout;
	wire	wire_l2_w0_n5_mux_dataout;
	wire	wire_l2_w0_n6_mux_dataout;
	wire	wire_l2_w0_n7_mux_dataout;
	wire	wire_l2_w10_n0_mux_dataout;
	wire	wire_l2_w10_n1_mux_dataout;
	wire	wire_l2_w10_n2_mux_dataout;
	wire	wire_l2_w10_n3_mux_dataout;
	wire	wire_l2_w10_n4_mux_dataout;
	wire	wire_l2_w10_n5_mux_dataout;
	wire	wire_l2_w10_n6_mux_dataout;
	wire	wire_l2_w10_n7_mux_dataout;
	wire	wire_l2_w11_n0_mux_dataout;
	wire	wire_l2_w11_n1_mux_dataout;
	wire	wire_l2_w11_n2_mux_dataout;
	wire	wire_l2_w11_n3_mux_dataout;
	wire	wire_l2_w11_n4_mux_dataout;
	wire	wire_l2_w11_n5_mux_dataout;
	wire	wire_l2_w11_n6_mux_dataout;
	wire	wire_l2_w11_n7_mux_dataout;
	wire	wire_l2_w12_n0_mux_dataout;
	wire	wire_l2_w12_n1_mux_dataout;
	wire	wire_l2_w12_n2_mux_dataout;
	wire	wire_l2_w12_n3_mux_dataout;
	wire	wire_l2_w12_n4_mux_dataout;
	wire	wire_l2_w12_n5_mux_dataout;
	wire	wire_l2_w12_n6_mux_dataout;
	wire	wire_l2_w12_n7_mux_dataout;
	wire	wire_l2_w13_n0_mux_dataout;
	wire	wire_l2_w13_n1_mux_dataout;
	wire	wire_l2_w13_n2_mux_dataout;
	wire	wire_l2_w13_n3_mux_dataout;
	wire	wire_l2_w13_n4_mux_dataout;
	wire	wire_l2_w13_n5_mux_dataout;
	wire	wire_l2_w13_n6_mux_dataout;
	wire	wire_l2_w13_n7_mux_dataout;
	wire	wire_l2_w14_n0_mux_dataout;
	wire	wire_l2_w14_n1_mux_dataout;
	wire	wire_l2_w14_n2_mux_dataout;
	wire	wire_l2_w14_n3_mux_dataout;
	wire	wire_l2_w14_n4_mux_dataout;
	wire	wire_l2_w14_n5_mux_dataout;
	wire	wire_l2_w14_n6_mux_dataout;
	wire	wire_l2_w14_n7_mux_dataout;
	wire	wire_l2_w15_n0_mux_dataout;
	wire	wire_l2_w15_n1_mux_dataout;
	wire	wire_l2_w15_n2_mux_dataout;
	wire	wire_l2_w15_n3_mux_dataout;
	wire	wire_l2_w15_n4_mux_dataout;
	wire	wire_l2_w15_n5_mux_dataout;
	wire	wire_l2_w15_n6_mux_dataout;
	wire	wire_l2_w15_n7_mux_dataout;
	wire	wire_l2_w1_n0_mux_dataout;
	wire	wire_l2_w1_n1_mux_dataout;
	wire	wire_l2_w1_n2_mux_dataout;
	wire	wire_l2_w1_n3_mux_dataout;
	wire	wire_l2_w1_n4_mux_dataout;
	wire	wire_l2_w1_n5_mux_dataout;
	wire	wire_l2_w1_n6_mux_dataout;
	wire	wire_l2_w1_n7_mux_dataout;
	wire	wire_l2_w2_n0_mux_dataout;
	wire	wire_l2_w2_n1_mux_dataout;
	wire	wire_l2_w2_n2_mux_dataout;
	wire	wire_l2_w2_n3_mux_dataout;
	wire	wire_l2_w2_n4_mux_dataout;
	wire	wire_l2_w2_n5_mux_dataout;
	wire	wire_l2_w2_n6_mux_dataout;
	wire	wire_l2_w2_n7_mux_dataout;
	wire	wire_l2_w3_n0_mux_dataout;
	wire	wire_l2_w3_n1_mux_dataout;
	wire	wire_l2_w3_n2_mux_dataout;
	wire	wire_l2_w3_n3_mux_dataout;
	wire	wire_l2_w3_n4_mux_dataout;
	wire	wire_l2_w3_n5_mux_dataout;
	wire	wire_l2_w3_n6_mux_dataout;
	wire	wire_l2_w3_n7_mux_dataout;
	wire	wire_l2_w4_n0_mux_dataout;
	wire	wire_l2_w4_n1_mux_dataout;
	wire	wire_l2_w4_n2_mux_dataout;
	wire	wire_l2_w4_n3_mux_dataout;
	wire	wire_l2_w4_n4_mux_dataout;
	wire	wire_l2_w4_n5_mux_dataout;
	wire	wire_l2_w4_n6_mux_dataout;
	wire	wire_l2_w4_n7_mux_dataout;
	wire	wire_l2_w5_n0_mux_dataout;
	wire	wire_l2_w5_n1_mux_dataout;
	wire	wire_l2_w5_n2_mux_dataout;
	wire	wire_l2_w5_n3_mux_dataout;
	wire	wire_l2_w5_n4_mux_dataout;
	wire	wire_l2_w5_n5_mux_dataout;
	wire	wire_l2_w5_n6_mux_dataout;
	wire	wire_l2_w5_n7_mux_dataout;
	wire	wire_l2_w6_n0_mux_dataout;
	wire	wire_l2_w6_n1_mux_dataout;
	wire	wire_l2_w6_n2_mux_dataout;
	wire	wire_l2_w6_n3_mux_dataout;
	wire	wire_l2_w6_n4_mux_dataout;
	wire	wire_l2_w6_n5_mux_dataout;
	wire	wire_l2_w6_n6_mux_dataout;
	wire	wire_l2_w6_n7_mux_dataout;
	wire	wire_l2_w7_n0_mux_dataout;
	wire	wire_l2_w7_n1_mux_dataout;
	wire	wire_l2_w7_n2_mux_dataout;
	wire	wire_l2_w7_n3_mux_dataout;
	wire	wire_l2_w7_n4_mux_dataout;
	wire	wire_l2_w7_n5_mux_dataout;
	wire	wire_l2_w7_n6_mux_dataout;
	wire	wire_l2_w7_n7_mux_dataout;
	wire	wire_l2_w8_n0_mux_dataout;
	wire	wire_l2_w8_n1_mux_dataout;
	wire	wire_l2_w8_n2_mux_dataout;
	wire	wire_l2_w8_n3_mux_dataout;
	wire	wire_l2_w8_n4_mux_dataout;
	wire	wire_l2_w8_n5_mux_dataout;
	wire	wire_l2_w8_n6_mux_dataout;
	wire	wire_l2_w8_n7_mux_dataout;
	wire	wire_l2_w9_n0_mux_dataout;
	wire	wire_l2_w9_n1_mux_dataout;
	wire	wire_l2_w9_n2_mux_dataout;
	wire	wire_l2_w9_n3_mux_dataout;
	wire	wire_l2_w9_n4_mux_dataout;
	wire	wire_l2_w9_n5_mux_dataout;
	wire	wire_l2_w9_n6_mux_dataout;
	wire	wire_l2_w9_n7_mux_dataout;
	wire	wire_l3_w0_n0_mux_dataout;
	wire	wire_l3_w0_n1_mux_dataout;
	wire	wire_l3_w0_n2_mux_dataout;
	wire	wire_l3_w0_n3_mux_dataout;
	wire	wire_l3_w10_n0_mux_dataout;
	wire	wire_l3_w10_n1_mux_dataout;
	wire	wire_l3_w10_n2_mux_dataout;
	wire	wire_l3_w10_n3_mux_dataout;
	wire	wire_l3_w11_n0_mux_dataout;
	wire	wire_l3_w11_n1_mux_dataout;
	wire	wire_l3_w11_n2_mux_dataout;
	wire	wire_l3_w11_n3_mux_dataout;
	wire	wire_l3_w12_n0_mux_dataout;
	wire	wire_l3_w12_n1_mux_dataout;
	wire	wire_l3_w12_n2_mux_dataout;
	wire	wire_l3_w12_n3_mux_dataout;
	wire	wire_l3_w13_n0_mux_dataout;
	wire	wire_l3_w13_n1_mux_dataout;
	wire	wire_l3_w13_n2_mux_dataout;
	wire	wire_l3_w13_n3_mux_dataout;
	wire	wire_l3_w14_n0_mux_dataout;
	wire	wire_l3_w14_n1_mux_dataout;
	wire	wire_l3_w14_n2_mux_dataout;
	wire	wire_l3_w14_n3_mux_dataout;
	wire	wire_l3_w15_n0_mux_dataout;
	wire	wire_l3_w15_n1_mux_dataout;
	wire	wire_l3_w15_n2_mux_dataout;
	wire	wire_l3_w15_n3_mux_dataout;
	wire	wire_l3_w1_n0_mux_dataout;
	wire	wire_l3_w1_n1_mux_dataout;
	wire	wire_l3_w1_n2_mux_dataout;
	wire	wire_l3_w1_n3_mux_dataout;
	wire	wire_l3_w2_n0_mux_dataout;
	wire	wire_l3_w2_n1_mux_dataout;
	wire	wire_l3_w2_n2_mux_dataout;
	wire	wire_l3_w2_n3_mux_dataout;
	wire	wire_l3_w3_n0_mux_dataout;
	wire	wire_l3_w3_n1_mux_dataout;
	wire	wire_l3_w3_n2_mux_dataout;
	wire	wire_l3_w3_n3_mux_dataout;
	wire	wire_l3_w4_n0_mux_dataout;
	wire	wire_l3_w4_n1_mux_dataout;
	wire	wire_l3_w4_n2_mux_dataout;
	wire	wire_l3_w4_n3_mux_dataout;
	wire	wire_l3_w5_n0_mux_dataout;
	wire	wire_l3_w5_n1_mux_dataout;
	wire	wire_l3_w5_n2_mux_dataout;
	wire	wire_l3_w5_n3_mux_dataout;
	wire	wire_l3_w6_n0_mux_dataout;
	wire	wire_l3_w6_n1_mux_dataout;
	wire	wire_l3_w6_n2_mux_dataout;
	wire	wire_l3_w6_n3_mux_dataout;
	wire	wire_l3_w7_n0_mux_dataout;
	wire	wire_l3_w7_n1_mux_dataout;
	wire	wire_l3_w7_n2_mux_dataout;
	wire	wire_l3_w7_n3_mux_dataout;
	wire	wire_l3_w8_n0_mux_dataout;
	wire	wire_l3_w8_n1_mux_dataout;
	wire	wire_l3_w8_n2_mux_dataout;
	wire	wire_l3_w8_n3_mux_dataout;
	wire	wire_l3_w9_n0_mux_dataout;
	wire	wire_l3_w9_n1_mux_dataout;
	wire	wire_l3_w9_n2_mux_dataout;
	wire	wire_l3_w9_n3_mux_dataout;
	wire	wire_l4_w0_n0_mux_dataout;
	wire	wire_l4_w0_n1_mux_dataout;
	wire	wire_l4_w10_n0_mux_dataout;
	wire	wire_l4_w10_n1_mux_dataout;
	wire	wire_l4_w11_n0_mux_dataout;
	wire	wire_l4_w11_n1_mux_dataout;
	wire	wire_l4_w12_n0_mux_dataout;
	wire	wire_l4_w12_n1_mux_dataout;
	wire	wire_l4_w13_n0_mux_dataout;
	wire	wire_l4_w13_n1_mux_dataout;
	wire	wire_l4_w14_n0_mux_dataout;
	wire	wire_l4_w14_n1_mux_dataout;
	wire	wire_l4_w15_n0_mux_dataout;
	wire	wire_l4_w15_n1_mux_dataout;
	wire	wire_l4_w1_n0_mux_dataout;
	wire	wire_l4_w1_n1_mux_dataout;
	wire	wire_l4_w2_n0_mux_dataout;
	wire	wire_l4_w2_n1_mux_dataout;
	wire	wire_l4_w3_n0_mux_dataout;
	wire	wire_l4_w3_n1_mux_dataout;
	wire	wire_l4_w4_n0_mux_dataout;
	wire	wire_l4_w4_n1_mux_dataout;
	wire	wire_l4_w5_n0_mux_dataout;
	wire	wire_l4_w5_n1_mux_dataout;
	wire	wire_l4_w6_n0_mux_dataout;
	wire	wire_l4_w6_n1_mux_dataout;
	wire	wire_l4_w7_n0_mux_dataout;
	wire	wire_l4_w7_n1_mux_dataout;
	wire	wire_l4_w8_n0_mux_dataout;
	wire	wire_l4_w8_n1_mux_dataout;
	wire	wire_l4_w9_n0_mux_dataout;
	wire	wire_l4_w9_n1_mux_dataout;
	wire	wire_l5_w0_n0_mux_dataout;
	wire	wire_l5_w10_n0_mux_dataout;
	wire	wire_l5_w11_n0_mux_dataout;
	wire	wire_l5_w12_n0_mux_dataout;
	wire	wire_l5_w13_n0_mux_dataout;
	wire	wire_l5_w14_n0_mux_dataout;
	wire	wire_l5_w15_n0_mux_dataout;
	wire	wire_l5_w1_n0_mux_dataout;
	wire	wire_l5_w2_n0_mux_dataout;
	wire	wire_l5_w3_n0_mux_dataout;
	wire	wire_l5_w4_n0_mux_dataout;
	wire	wire_l5_w5_n0_mux_dataout;
	wire	wire_l5_w6_n0_mux_dataout;
	wire	wire_l5_w7_n0_mux_dataout;
	wire	wire_l5_w8_n0_mux_dataout;
	wire	wire_l5_w9_n0_mux_dataout;
	wire  [991:0]  data_wire;
	wire  [15:0]  result_wire_ext;
	wire  [24:0]  sel_wire;

	// synopsys translate_off
	initial
		external_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) external_reg <= 16'b0;
		else if  (clken == 1'b1)   external_reg <= result_wire_ext;
	assign		wire_l1_w0_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[16] : data_wire[0];
	assign		wire_l1_w0_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[336] : data_wire[320];
	assign		wire_l1_w0_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[368] : data_wire[352];
	assign		wire_l1_w0_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[400] : data_wire[384];
	assign		wire_l1_w0_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[432] : data_wire[416];
	assign		wire_l1_w0_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[464] : data_wire[448];
	assign		wire_l1_w0_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[496] : data_wire[480];
	assign		wire_l1_w0_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[48] : data_wire[32];
	assign		wire_l1_w0_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[80] : data_wire[64];
	assign		wire_l1_w0_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[112] : data_wire[96];
	assign		wire_l1_w0_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[144] : data_wire[128];
	assign		wire_l1_w0_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[176] : data_wire[160];
	assign		wire_l1_w0_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[208] : data_wire[192];
	assign		wire_l1_w0_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[240] : data_wire[224];
	assign		wire_l1_w0_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[272] : data_wire[256];
	assign		wire_l1_w0_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[304] : data_wire[288];
	assign		wire_l1_w10_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[26] : data_wire[10];
	assign		wire_l1_w10_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[346] : data_wire[330];
	assign		wire_l1_w10_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[378] : data_wire[362];
	assign		wire_l1_w10_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[410] : data_wire[394];
	assign		wire_l1_w10_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[442] : data_wire[426];
	assign		wire_l1_w10_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[474] : data_wire[458];
	assign		wire_l1_w10_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[506] : data_wire[490];
	assign		wire_l1_w10_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[58] : data_wire[42];
	assign		wire_l1_w10_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[90] : data_wire[74];
	assign		wire_l1_w10_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[122] : data_wire[106];
	assign		wire_l1_w10_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[154] : data_wire[138];
	assign		wire_l1_w10_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[186] : data_wire[170];
	assign		wire_l1_w10_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[218] : data_wire[202];
	assign		wire_l1_w10_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[250] : data_wire[234];
	assign		wire_l1_w10_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[282] : data_wire[266];
	assign		wire_l1_w10_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[314] : data_wire[298];
	assign		wire_l1_w11_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[27] : data_wire[11];
	assign		wire_l1_w11_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[347] : data_wire[331];
	assign		wire_l1_w11_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[379] : data_wire[363];
	assign		wire_l1_w11_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[411] : data_wire[395];
	assign		wire_l1_w11_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[443] : data_wire[427];
	assign		wire_l1_w11_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[475] : data_wire[459];
	assign		wire_l1_w11_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[507] : data_wire[491];
	assign		wire_l1_w11_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[59] : data_wire[43];
	assign		wire_l1_w11_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[91] : data_wire[75];
	assign		wire_l1_w11_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[123] : data_wire[107];
	assign		wire_l1_w11_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[155] : data_wire[139];
	assign		wire_l1_w11_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[187] : data_wire[171];
	assign		wire_l1_w11_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[219] : data_wire[203];
	assign		wire_l1_w11_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[251] : data_wire[235];
	assign		wire_l1_w11_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[283] : data_wire[267];
	assign		wire_l1_w11_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[315] : data_wire[299];
	assign		wire_l1_w12_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[28] : data_wire[12];
	assign		wire_l1_w12_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[348] : data_wire[332];
	assign		wire_l1_w12_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[380] : data_wire[364];
	assign		wire_l1_w12_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[412] : data_wire[396];
	assign		wire_l1_w12_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[444] : data_wire[428];
	assign		wire_l1_w12_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[476] : data_wire[460];
	assign		wire_l1_w12_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[508] : data_wire[492];
	assign		wire_l1_w12_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[60] : data_wire[44];
	assign		wire_l1_w12_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[92] : data_wire[76];
	assign		wire_l1_w12_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[124] : data_wire[108];
	assign		wire_l1_w12_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[156] : data_wire[140];
	assign		wire_l1_w12_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[188] : data_wire[172];
	assign		wire_l1_w12_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[220] : data_wire[204];
	assign		wire_l1_w12_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[252] : data_wire[236];
	assign		wire_l1_w12_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[284] : data_wire[268];
	assign		wire_l1_w12_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[316] : data_wire[300];
	assign		wire_l1_w13_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[29] : data_wire[13];
	assign		wire_l1_w13_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[349] : data_wire[333];
	assign		wire_l1_w13_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[381] : data_wire[365];
	assign		wire_l1_w13_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[413] : data_wire[397];
	assign		wire_l1_w13_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[445] : data_wire[429];
	assign		wire_l1_w13_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[477] : data_wire[461];
	assign		wire_l1_w13_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[509] : data_wire[493];
	assign		wire_l1_w13_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[61] : data_wire[45];
	assign		wire_l1_w13_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[93] : data_wire[77];
	assign		wire_l1_w13_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[125] : data_wire[109];
	assign		wire_l1_w13_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[157] : data_wire[141];
	assign		wire_l1_w13_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[189] : data_wire[173];
	assign		wire_l1_w13_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[221] : data_wire[205];
	assign		wire_l1_w13_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[253] : data_wire[237];
	assign		wire_l1_w13_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[285] : data_wire[269];
	assign		wire_l1_w13_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[317] : data_wire[301];
	assign		wire_l1_w14_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[30] : data_wire[14];
	assign		wire_l1_w14_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[350] : data_wire[334];
	assign		wire_l1_w14_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[382] : data_wire[366];
	assign		wire_l1_w14_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[414] : data_wire[398];
	assign		wire_l1_w14_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[446] : data_wire[430];
	assign		wire_l1_w14_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[478] : data_wire[462];
	assign		wire_l1_w14_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[510] : data_wire[494];
	assign		wire_l1_w14_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[62] : data_wire[46];
	assign		wire_l1_w14_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[94] : data_wire[78];
	assign		wire_l1_w14_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[126] : data_wire[110];
	assign		wire_l1_w14_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[158] : data_wire[142];
	assign		wire_l1_w14_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[190] : data_wire[174];
	assign		wire_l1_w14_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[222] : data_wire[206];
	assign		wire_l1_w14_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[254] : data_wire[238];
	assign		wire_l1_w14_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[286] : data_wire[270];
	assign		wire_l1_w14_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[318] : data_wire[302];
	assign		wire_l1_w15_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[31] : data_wire[15];
	assign		wire_l1_w15_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[351] : data_wire[335];
	assign		wire_l1_w15_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[383] : data_wire[367];
	assign		wire_l1_w15_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[415] : data_wire[399];
	assign		wire_l1_w15_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[447] : data_wire[431];
	assign		wire_l1_w15_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[479] : data_wire[463];
	assign		wire_l1_w15_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[511] : data_wire[495];
	assign		wire_l1_w15_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[63] : data_wire[47];
	assign		wire_l1_w15_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[95] : data_wire[79];
	assign		wire_l1_w15_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[127] : data_wire[111];
	assign		wire_l1_w15_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[159] : data_wire[143];
	assign		wire_l1_w15_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[191] : data_wire[175];
	assign		wire_l1_w15_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[223] : data_wire[207];
	assign		wire_l1_w15_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[255] : data_wire[239];
	assign		wire_l1_w15_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[287] : data_wire[271];
	assign		wire_l1_w15_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[319] : data_wire[303];
	assign		wire_l1_w1_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[17] : data_wire[1];
	assign		wire_l1_w1_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[337] : data_wire[321];
	assign		wire_l1_w1_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[369] : data_wire[353];
	assign		wire_l1_w1_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[401] : data_wire[385];
	assign		wire_l1_w1_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[433] : data_wire[417];
	assign		wire_l1_w1_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[465] : data_wire[449];
	assign		wire_l1_w1_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[497] : data_wire[481];
	assign		wire_l1_w1_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[49] : data_wire[33];
	assign		wire_l1_w1_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[81] : data_wire[65];
	assign		wire_l1_w1_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[113] : data_wire[97];
	assign		wire_l1_w1_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[145] : data_wire[129];
	assign		wire_l1_w1_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[177] : data_wire[161];
	assign		wire_l1_w1_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[209] : data_wire[193];
	assign		wire_l1_w1_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[241] : data_wire[225];
	assign		wire_l1_w1_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[273] : data_wire[257];
	assign		wire_l1_w1_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[305] : data_wire[289];
	assign		wire_l1_w2_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[18] : data_wire[2];
	assign		wire_l1_w2_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[338] : data_wire[322];
	assign		wire_l1_w2_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[370] : data_wire[354];
	assign		wire_l1_w2_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[402] : data_wire[386];
	assign		wire_l1_w2_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[434] : data_wire[418];
	assign		wire_l1_w2_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[466] : data_wire[450];
	assign		wire_l1_w2_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[498] : data_wire[482];
	assign		wire_l1_w2_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[50] : data_wire[34];
	assign		wire_l1_w2_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[82] : data_wire[66];
	assign		wire_l1_w2_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[114] : data_wire[98];
	assign		wire_l1_w2_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[146] : data_wire[130];
	assign		wire_l1_w2_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[178] : data_wire[162];
	assign		wire_l1_w2_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[210] : data_wire[194];
	assign		wire_l1_w2_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[242] : data_wire[226];
	assign		wire_l1_w2_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[274] : data_wire[258];
	assign		wire_l1_w2_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[306] : data_wire[290];
	assign		wire_l1_w3_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[19] : data_wire[3];
	assign		wire_l1_w3_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[339] : data_wire[323];
	assign		wire_l1_w3_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[371] : data_wire[355];
	assign		wire_l1_w3_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[403] : data_wire[387];
	assign		wire_l1_w3_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[435] : data_wire[419];
	assign		wire_l1_w3_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[467] : data_wire[451];
	assign		wire_l1_w3_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[499] : data_wire[483];
	assign		wire_l1_w3_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[51] : data_wire[35];
	assign		wire_l1_w3_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[83] : data_wire[67];
	assign		wire_l1_w3_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[115] : data_wire[99];
	assign		wire_l1_w3_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[147] : data_wire[131];
	assign		wire_l1_w3_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[179] : data_wire[163];
	assign		wire_l1_w3_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[211] : data_wire[195];
	assign		wire_l1_w3_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[243] : data_wire[227];
	assign		wire_l1_w3_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[275] : data_wire[259];
	assign		wire_l1_w3_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[307] : data_wire[291];
	assign		wire_l1_w4_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[20] : data_wire[4];
	assign		wire_l1_w4_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[340] : data_wire[324];
	assign		wire_l1_w4_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[372] : data_wire[356];
	assign		wire_l1_w4_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[404] : data_wire[388];
	assign		wire_l1_w4_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[436] : data_wire[420];
	assign		wire_l1_w4_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[468] : data_wire[452];
	assign		wire_l1_w4_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[500] : data_wire[484];
	assign		wire_l1_w4_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[52] : data_wire[36];
	assign		wire_l1_w4_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[84] : data_wire[68];
	assign		wire_l1_w4_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[116] : data_wire[100];
	assign		wire_l1_w4_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[148] : data_wire[132];
	assign		wire_l1_w4_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[180] : data_wire[164];
	assign		wire_l1_w4_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[212] : data_wire[196];
	assign		wire_l1_w4_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[244] : data_wire[228];
	assign		wire_l1_w4_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[276] : data_wire[260];
	assign		wire_l1_w4_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[308] : data_wire[292];
	assign		wire_l1_w5_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[21] : data_wire[5];
	assign		wire_l1_w5_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[341] : data_wire[325];
	assign		wire_l1_w5_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[373] : data_wire[357];
	assign		wire_l1_w5_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[405] : data_wire[389];
	assign		wire_l1_w5_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[437] : data_wire[421];
	assign		wire_l1_w5_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[469] : data_wire[453];
	assign		wire_l1_w5_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[501] : data_wire[485];
	assign		wire_l1_w5_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[53] : data_wire[37];
	assign		wire_l1_w5_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[85] : data_wire[69];
	assign		wire_l1_w5_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[117] : data_wire[101];
	assign		wire_l1_w5_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[149] : data_wire[133];
	assign		wire_l1_w5_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[181] : data_wire[165];
	assign		wire_l1_w5_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[213] : data_wire[197];
	assign		wire_l1_w5_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[245] : data_wire[229];
	assign		wire_l1_w5_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[277] : data_wire[261];
	assign		wire_l1_w5_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[309] : data_wire[293];
	assign		wire_l1_w6_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[22] : data_wire[6];
	assign		wire_l1_w6_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[342] : data_wire[326];
	assign		wire_l1_w6_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[374] : data_wire[358];
	assign		wire_l1_w6_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[406] : data_wire[390];
	assign		wire_l1_w6_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[438] : data_wire[422];
	assign		wire_l1_w6_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[470] : data_wire[454];
	assign		wire_l1_w6_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[502] : data_wire[486];
	assign		wire_l1_w6_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[54] : data_wire[38];
	assign		wire_l1_w6_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[86] : data_wire[70];
	assign		wire_l1_w6_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[118] : data_wire[102];
	assign		wire_l1_w6_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[150] : data_wire[134];
	assign		wire_l1_w6_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[182] : data_wire[166];
	assign		wire_l1_w6_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[214] : data_wire[198];
	assign		wire_l1_w6_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[246] : data_wire[230];
	assign		wire_l1_w6_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[278] : data_wire[262];
	assign		wire_l1_w6_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[310] : data_wire[294];
	assign		wire_l1_w7_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[23] : data_wire[7];
	assign		wire_l1_w7_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[343] : data_wire[327];
	assign		wire_l1_w7_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[375] : data_wire[359];
	assign		wire_l1_w7_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[407] : data_wire[391];
	assign		wire_l1_w7_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[439] : data_wire[423];
	assign		wire_l1_w7_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[471] : data_wire[455];
	assign		wire_l1_w7_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[503] : data_wire[487];
	assign		wire_l1_w7_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[55] : data_wire[39];
	assign		wire_l1_w7_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[87] : data_wire[71];
	assign		wire_l1_w7_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[119] : data_wire[103];
	assign		wire_l1_w7_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[151] : data_wire[135];
	assign		wire_l1_w7_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[183] : data_wire[167];
	assign		wire_l1_w7_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[215] : data_wire[199];
	assign		wire_l1_w7_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[247] : data_wire[231];
	assign		wire_l1_w7_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[279] : data_wire[263];
	assign		wire_l1_w7_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[311] : data_wire[295];
	assign		wire_l1_w8_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[24] : data_wire[8];
	assign		wire_l1_w8_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[344] : data_wire[328];
	assign		wire_l1_w8_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[376] : data_wire[360];
	assign		wire_l1_w8_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[408] : data_wire[392];
	assign		wire_l1_w8_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[440] : data_wire[424];
	assign		wire_l1_w8_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[472] : data_wire[456];
	assign		wire_l1_w8_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[504] : data_wire[488];
	assign		wire_l1_w8_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[56] : data_wire[40];
	assign		wire_l1_w8_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[88] : data_wire[72];
	assign		wire_l1_w8_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[120] : data_wire[104];
	assign		wire_l1_w8_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[152] : data_wire[136];
	assign		wire_l1_w8_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[184] : data_wire[168];
	assign		wire_l1_w8_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[216] : data_wire[200];
	assign		wire_l1_w8_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[248] : data_wire[232];
	assign		wire_l1_w8_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[280] : data_wire[264];
	assign		wire_l1_w8_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[312] : data_wire[296];
	assign		wire_l1_w9_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[25] : data_wire[9];
	assign		wire_l1_w9_n10_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[345] : data_wire[329];
	assign		wire_l1_w9_n11_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[377] : data_wire[361];
	assign		wire_l1_w9_n12_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[409] : data_wire[393];
	assign		wire_l1_w9_n13_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[441] : data_wire[425];
	assign		wire_l1_w9_n14_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[473] : data_wire[457];
	assign		wire_l1_w9_n15_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[505] : data_wire[489];
	assign		wire_l1_w9_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[57] : data_wire[41];
	assign		wire_l1_w9_n2_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[89] : data_wire[73];
	assign		wire_l1_w9_n3_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[121] : data_wire[105];
	assign		wire_l1_w9_n4_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[153] : data_wire[137];
	assign		wire_l1_w9_n5_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[185] : data_wire[169];
	assign		wire_l1_w9_n6_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[217] : data_wire[201];
	assign		wire_l1_w9_n7_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[249] : data_wire[233];
	assign		wire_l1_w9_n8_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[281] : data_wire[265];
	assign		wire_l1_w9_n9_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[313] : data_wire[297];
	assign		wire_l2_w0_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[513] : data_wire[512];
	assign		wire_l2_w0_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[515] : data_wire[514];
	assign		wire_l2_w0_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[517] : data_wire[516];
	assign		wire_l2_w0_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[519] : data_wire[518];
	assign		wire_l2_w0_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[521] : data_wire[520];
	assign		wire_l2_w0_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[523] : data_wire[522];
	assign		wire_l2_w0_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[525] : data_wire[524];
	assign		wire_l2_w0_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[527] : data_wire[526];
	assign		wire_l2_w10_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[673] : data_wire[672];
	assign		wire_l2_w10_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[675] : data_wire[674];
	assign		wire_l2_w10_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[677] : data_wire[676];
	assign		wire_l2_w10_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[679] : data_wire[678];
	assign		wire_l2_w10_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[681] : data_wire[680];
	assign		wire_l2_w10_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[683] : data_wire[682];
	assign		wire_l2_w10_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[685] : data_wire[684];
	assign		wire_l2_w10_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[687] : data_wire[686];
	assign		wire_l2_w11_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[689] : data_wire[688];
	assign		wire_l2_w11_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[691] : data_wire[690];
	assign		wire_l2_w11_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[693] : data_wire[692];
	assign		wire_l2_w11_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[695] : data_wire[694];
	assign		wire_l2_w11_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[697] : data_wire[696];
	assign		wire_l2_w11_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[699] : data_wire[698];
	assign		wire_l2_w11_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[701] : data_wire[700];
	assign		wire_l2_w11_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[703] : data_wire[702];
	assign		wire_l2_w12_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[705] : data_wire[704];
	assign		wire_l2_w12_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[707] : data_wire[706];
	assign		wire_l2_w12_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[709] : data_wire[708];
	assign		wire_l2_w12_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[711] : data_wire[710];
	assign		wire_l2_w12_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[713] : data_wire[712];
	assign		wire_l2_w12_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[715] : data_wire[714];
	assign		wire_l2_w12_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[717] : data_wire[716];
	assign		wire_l2_w12_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[719] : data_wire[718];
	assign		wire_l2_w13_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[721] : data_wire[720];
	assign		wire_l2_w13_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[723] : data_wire[722];
	assign		wire_l2_w13_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[725] : data_wire[724];
	assign		wire_l2_w13_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[727] : data_wire[726];
	assign		wire_l2_w13_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[729] : data_wire[728];
	assign		wire_l2_w13_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[731] : data_wire[730];
	assign		wire_l2_w13_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[733] : data_wire[732];
	assign		wire_l2_w13_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[735] : data_wire[734];
	assign		wire_l2_w14_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[737] : data_wire[736];
	assign		wire_l2_w14_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[739] : data_wire[738];
	assign		wire_l2_w14_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[741] : data_wire[740];
	assign		wire_l2_w14_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[743] : data_wire[742];
	assign		wire_l2_w14_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[745] : data_wire[744];
	assign		wire_l2_w14_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[747] : data_wire[746];
	assign		wire_l2_w14_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[749] : data_wire[748];
	assign		wire_l2_w14_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[751] : data_wire[750];
	assign		wire_l2_w15_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[753] : data_wire[752];
	assign		wire_l2_w15_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[755] : data_wire[754];
	assign		wire_l2_w15_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[757] : data_wire[756];
	assign		wire_l2_w15_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[759] : data_wire[758];
	assign		wire_l2_w15_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[761] : data_wire[760];
	assign		wire_l2_w15_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[763] : data_wire[762];
	assign		wire_l2_w15_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[765] : data_wire[764];
	assign		wire_l2_w15_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[767] : data_wire[766];
	assign		wire_l2_w1_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[529] : data_wire[528];
	assign		wire_l2_w1_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[531] : data_wire[530];
	assign		wire_l2_w1_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[533] : data_wire[532];
	assign		wire_l2_w1_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[535] : data_wire[534];
	assign		wire_l2_w1_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[537] : data_wire[536];
	assign		wire_l2_w1_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[539] : data_wire[538];
	assign		wire_l2_w1_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[541] : data_wire[540];
	assign		wire_l2_w1_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[543] : data_wire[542];
	assign		wire_l2_w2_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[545] : data_wire[544];
	assign		wire_l2_w2_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[547] : data_wire[546];
	assign		wire_l2_w2_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[549] : data_wire[548];
	assign		wire_l2_w2_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[551] : data_wire[550];
	assign		wire_l2_w2_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[553] : data_wire[552];
	assign		wire_l2_w2_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[555] : data_wire[554];
	assign		wire_l2_w2_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[557] : data_wire[556];
	assign		wire_l2_w2_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[559] : data_wire[558];
	assign		wire_l2_w3_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[561] : data_wire[560];
	assign		wire_l2_w3_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[563] : data_wire[562];
	assign		wire_l2_w3_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[565] : data_wire[564];
	assign		wire_l2_w3_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[567] : data_wire[566];
	assign		wire_l2_w3_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[569] : data_wire[568];
	assign		wire_l2_w3_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[571] : data_wire[570];
	assign		wire_l2_w3_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[573] : data_wire[572];
	assign		wire_l2_w3_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[575] : data_wire[574];
	assign		wire_l2_w4_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[577] : data_wire[576];
	assign		wire_l2_w4_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[579] : data_wire[578];
	assign		wire_l2_w4_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[581] : data_wire[580];
	assign		wire_l2_w4_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[583] : data_wire[582];
	assign		wire_l2_w4_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[585] : data_wire[584];
	assign		wire_l2_w4_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[587] : data_wire[586];
	assign		wire_l2_w4_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[589] : data_wire[588];
	assign		wire_l2_w4_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[591] : data_wire[590];
	assign		wire_l2_w5_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[593] : data_wire[592];
	assign		wire_l2_w5_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[595] : data_wire[594];
	assign		wire_l2_w5_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[597] : data_wire[596];
	assign		wire_l2_w5_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[599] : data_wire[598];
	assign		wire_l2_w5_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[601] : data_wire[600];
	assign		wire_l2_w5_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[603] : data_wire[602];
	assign		wire_l2_w5_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[605] : data_wire[604];
	assign		wire_l2_w5_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[607] : data_wire[606];
	assign		wire_l2_w6_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[609] : data_wire[608];
	assign		wire_l2_w6_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[611] : data_wire[610];
	assign		wire_l2_w6_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[613] : data_wire[612];
	assign		wire_l2_w6_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[615] : data_wire[614];
	assign		wire_l2_w6_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[617] : data_wire[616];
	assign		wire_l2_w6_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[619] : data_wire[618];
	assign		wire_l2_w6_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[621] : data_wire[620];
	assign		wire_l2_w6_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[623] : data_wire[622];
	assign		wire_l2_w7_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[625] : data_wire[624];
	assign		wire_l2_w7_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[627] : data_wire[626];
	assign		wire_l2_w7_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[629] : data_wire[628];
	assign		wire_l2_w7_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[631] : data_wire[630];
	assign		wire_l2_w7_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[633] : data_wire[632];
	assign		wire_l2_w7_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[635] : data_wire[634];
	assign		wire_l2_w7_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[637] : data_wire[636];
	assign		wire_l2_w7_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[639] : data_wire[638];
	assign		wire_l2_w8_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[641] : data_wire[640];
	assign		wire_l2_w8_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[643] : data_wire[642];
	assign		wire_l2_w8_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[645] : data_wire[644];
	assign		wire_l2_w8_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[647] : data_wire[646];
	assign		wire_l2_w8_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[649] : data_wire[648];
	assign		wire_l2_w8_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[651] : data_wire[650];
	assign		wire_l2_w8_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[653] : data_wire[652];
	assign		wire_l2_w8_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[655] : data_wire[654];
	assign		wire_l2_w9_n0_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[657] : data_wire[656];
	assign		wire_l2_w9_n1_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[659] : data_wire[658];
	assign		wire_l2_w9_n2_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[661] : data_wire[660];
	assign		wire_l2_w9_n3_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[663] : data_wire[662];
	assign		wire_l2_w9_n4_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[665] : data_wire[664];
	assign		wire_l2_w9_n5_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[667] : data_wire[666];
	assign		wire_l2_w9_n6_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[669] : data_wire[668];
	assign		wire_l2_w9_n7_mux_dataout = (sel_wire[6] === 1'b1) ? data_wire[671] : data_wire[670];
	assign		wire_l3_w0_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[769] : data_wire[768];
	assign		wire_l3_w0_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[771] : data_wire[770];
	assign		wire_l3_w0_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[773] : data_wire[772];
	assign		wire_l3_w0_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[775] : data_wire[774];
	assign		wire_l3_w10_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[849] : data_wire[848];
	assign		wire_l3_w10_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[851] : data_wire[850];
	assign		wire_l3_w10_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[853] : data_wire[852];
	assign		wire_l3_w10_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[855] : data_wire[854];
	assign		wire_l3_w11_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[857] : data_wire[856];
	assign		wire_l3_w11_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[859] : data_wire[858];
	assign		wire_l3_w11_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[861] : data_wire[860];
	assign		wire_l3_w11_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[863] : data_wire[862];
	assign		wire_l3_w12_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[865] : data_wire[864];
	assign		wire_l3_w12_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[867] : data_wire[866];
	assign		wire_l3_w12_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[869] : data_wire[868];
	assign		wire_l3_w12_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[871] : data_wire[870];
	assign		wire_l3_w13_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[873] : data_wire[872];
	assign		wire_l3_w13_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[875] : data_wire[874];
	assign		wire_l3_w13_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[877] : data_wire[876];
	assign		wire_l3_w13_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[879] : data_wire[878];
	assign		wire_l3_w14_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[881] : data_wire[880];
	assign		wire_l3_w14_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[883] : data_wire[882];
	assign		wire_l3_w14_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[885] : data_wire[884];
	assign		wire_l3_w14_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[887] : data_wire[886];
	assign		wire_l3_w15_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[889] : data_wire[888];
	assign		wire_l3_w15_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[891] : data_wire[890];
	assign		wire_l3_w15_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[893] : data_wire[892];
	assign		wire_l3_w15_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[895] : data_wire[894];
	assign		wire_l3_w1_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[777] : data_wire[776];
	assign		wire_l3_w1_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[779] : data_wire[778];
	assign		wire_l3_w1_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[781] : data_wire[780];
	assign		wire_l3_w1_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[783] : data_wire[782];
	assign		wire_l3_w2_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[785] : data_wire[784];
	assign		wire_l3_w2_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[787] : data_wire[786];
	assign		wire_l3_w2_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[789] : data_wire[788];
	assign		wire_l3_w2_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[791] : data_wire[790];
	assign		wire_l3_w3_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[793] : data_wire[792];
	assign		wire_l3_w3_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[795] : data_wire[794];
	assign		wire_l3_w3_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[797] : data_wire[796];
	assign		wire_l3_w3_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[799] : data_wire[798];
	assign		wire_l3_w4_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[801] : data_wire[800];
	assign		wire_l3_w4_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[803] : data_wire[802];
	assign		wire_l3_w4_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[805] : data_wire[804];
	assign		wire_l3_w4_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[807] : data_wire[806];
	assign		wire_l3_w5_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[809] : data_wire[808];
	assign		wire_l3_w5_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[811] : data_wire[810];
	assign		wire_l3_w5_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[813] : data_wire[812];
	assign		wire_l3_w5_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[815] : data_wire[814];
	assign		wire_l3_w6_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[817] : data_wire[816];
	assign		wire_l3_w6_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[819] : data_wire[818];
	assign		wire_l3_w6_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[821] : data_wire[820];
	assign		wire_l3_w6_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[823] : data_wire[822];
	assign		wire_l3_w7_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[825] : data_wire[824];
	assign		wire_l3_w7_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[827] : data_wire[826];
	assign		wire_l3_w7_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[829] : data_wire[828];
	assign		wire_l3_w7_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[831] : data_wire[830];
	assign		wire_l3_w8_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[833] : data_wire[832];
	assign		wire_l3_w8_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[835] : data_wire[834];
	assign		wire_l3_w8_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[837] : data_wire[836];
	assign		wire_l3_w8_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[839] : data_wire[838];
	assign		wire_l3_w9_n0_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[841] : data_wire[840];
	assign		wire_l3_w9_n1_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[843] : data_wire[842];
	assign		wire_l3_w9_n2_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[845] : data_wire[844];
	assign		wire_l3_w9_n3_mux_dataout = (sel_wire[12] === 1'b1) ? data_wire[847] : data_wire[846];
	assign		wire_l4_w0_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[897] : data_wire[896];
	assign		wire_l4_w0_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[899] : data_wire[898];
	assign		wire_l4_w10_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[937] : data_wire[936];
	assign		wire_l4_w10_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[939] : data_wire[938];
	assign		wire_l4_w11_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[941] : data_wire[940];
	assign		wire_l4_w11_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[943] : data_wire[942];
	assign		wire_l4_w12_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[945] : data_wire[944];
	assign		wire_l4_w12_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[947] : data_wire[946];
	assign		wire_l4_w13_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[949] : data_wire[948];
	assign		wire_l4_w13_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[951] : data_wire[950];
	assign		wire_l4_w14_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[953] : data_wire[952];
	assign		wire_l4_w14_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[955] : data_wire[954];
	assign		wire_l4_w15_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[957] : data_wire[956];
	assign		wire_l4_w15_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[959] : data_wire[958];
	assign		wire_l4_w1_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[901] : data_wire[900];
	assign		wire_l4_w1_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[903] : data_wire[902];
	assign		wire_l4_w2_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[905] : data_wire[904];
	assign		wire_l4_w2_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[907] : data_wire[906];
	assign		wire_l4_w3_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[909] : data_wire[908];
	assign		wire_l4_w3_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[911] : data_wire[910];
	assign		wire_l4_w4_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[913] : data_wire[912];
	assign		wire_l4_w4_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[915] : data_wire[914];
	assign		wire_l4_w5_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[917] : data_wire[916];
	assign		wire_l4_w5_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[919] : data_wire[918];
	assign		wire_l4_w6_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[921] : data_wire[920];
	assign		wire_l4_w6_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[923] : data_wire[922];
	assign		wire_l4_w7_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[925] : data_wire[924];
	assign		wire_l4_w7_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[927] : data_wire[926];
	assign		wire_l4_w8_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[929] : data_wire[928];
	assign		wire_l4_w8_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[931] : data_wire[930];
	assign		wire_l4_w9_n0_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[933] : data_wire[932];
	assign		wire_l4_w9_n1_mux_dataout = (sel_wire[18] === 1'b1) ? data_wire[935] : data_wire[934];
	assign		wire_l5_w0_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[961] : data_wire[960];
	assign		wire_l5_w10_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[981] : data_wire[980];
	assign		wire_l5_w11_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[983] : data_wire[982];
	assign		wire_l5_w12_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[985] : data_wire[984];
	assign		wire_l5_w13_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[987] : data_wire[986];
	assign		wire_l5_w14_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[989] : data_wire[988];
	assign		wire_l5_w15_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[991] : data_wire[990];
	assign		wire_l5_w1_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[963] : data_wire[962];
	assign		wire_l5_w2_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[965] : data_wire[964];
	assign		wire_l5_w3_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[967] : data_wire[966];
	assign		wire_l5_w4_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[969] : data_wire[968];
	assign		wire_l5_w5_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[971] : data_wire[970];
	assign		wire_l5_w6_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[973] : data_wire[972];
	assign		wire_l5_w7_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[975] : data_wire[974];
	assign		wire_l5_w8_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[977] : data_wire[976];
	assign		wire_l5_w9_n0_mux_dataout = (sel_wire[24] === 1'b1) ? data_wire[979] : data_wire[978];
	assign
		data_wire = {wire_l4_w15_n1_mux_dataout, wire_l4_w15_n0_mux_dataout, wire_l4_w14_n1_mux_dataout, wire_l4_w14_n0_mux_dataout, wire_l4_w13_n1_mux_dataout, wire_l4_w13_n0_mux_dataout, wire_l4_w12_n1_mux_dataout, wire_l4_w12_n0_mux_dataout, wire_l4_w11_n1_mux_dataout, wire_l4_w11_n0_mux_dataout, wire_l4_w10_n1_mux_dataout, wire_l4_w10_n0_mux_dataout, wire_l4_w9_n1_mux_dataout, wire_l4_w9_n0_mux_dataout, wire_l4_w8_n1_mux_dataout, wire_l4_w8_n0_mux_dataout, wire_l4_w7_n1_mux_dataout, wire_l4_w7_n0_mux_dataout, wire_l4_w6_n1_mux_dataout, wire_l4_w6_n0_mux_dataout, wire_l4_w5_n1_mux_dataout, wire_l4_w5_n0_mux_dataout, wire_l4_w4_n1_mux_dataout, wire_l4_w4_n0_mux_dataout, wire_l4_w3_n1_mux_dataout, wire_l4_w3_n0_mux_dataout, wire_l4_w2_n1_mux_dataout, wire_l4_w2_n0_mux_dataout, wire_l4_w1_n1_mux_dataout, wire_l4_w1_n0_mux_dataout, wire_l4_w0_n1_mux_dataout, wire_l4_w0_n0_mux_dataout, wire_l3_w15_n3_mux_dataout, wire_l3_w15_n2_mux_dataout, wire_l3_w15_n1_mux_dataout, wire_l3_w15_n0_mux_dataout, wire_l3_w14_n3_mux_dataout, wire_l3_w14_n2_mux_dataout, wire_l3_w14_n1_mux_dataout, wire_l3_w14_n0_mux_dataout, wire_l3_w13_n3_mux_dataout, wire_l3_w13_n2_mux_dataout, wire_l3_w13_n1_mux_dataout, wire_l3_w13_n0_mux_dataout, wire_l3_w12_n3_mux_dataout, wire_l3_w12_n2_mux_dataout, wire_l3_w12_n1_mux_dataout, wire_l3_w12_n0_mux_dataout, wire_l3_w11_n3_mux_dataout, wire_l3_w11_n2_mux_dataout, wire_l3_w11_n1_mux_dataout, wire_l3_w11_n0_mux_dataout, wire_l3_w10_n3_mux_dataout, wire_l3_w10_n2_mux_dataout, wire_l3_w10_n1_mux_dataout, wire_l3_w10_n0_mux_dataout, wire_l3_w9_n3_mux_dataout, wire_l3_w9_n2_mux_dataout, wire_l3_w9_n1_mux_dataout, wire_l3_w9_n0_mux_dataout, wire_l3_w8_n3_mux_dataout, wire_l3_w8_n2_mux_dataout, wire_l3_w8_n1_mux_dataout, wire_l3_w8_n0_mux_dataout, wire_l3_w7_n3_mux_dataout, wire_l3_w7_n2_mux_dataout, wire_l3_w7_n1_mux_dataout, wire_l3_w7_n0_mux_dataout, wire_l3_w6_n3_mux_dataout, wire_l3_w6_n2_mux_dataout, wire_l3_w6_n1_mux_dataout, wire_l3_w6_n0_mux_dataout, wire_l3_w5_n3_mux_dataout, wire_l3_w5_n2_mux_dataout,
 wire_l3_w5_n1_mux_dataout, wire_l3_w5_n0_mux_dataout, wire_l3_w4_n3_mux_dataout, wire_l3_w4_n2_mux_dataout, wire_l3_w4_n1_mux_dataout, wire_l3_w4_n0_mux_dataout, wire_l3_w3_n3_mux_dataout, wire_l3_w3_n2_mux_dataout, wire_l3_w3_n1_mux_dataout, wire_l3_w3_n0_mux_dataout, wire_l3_w2_n3_mux_dataout, wire_l3_w2_n2_mux_dataout, wire_l3_w2_n1_mux_dataout, wire_l3_w2_n0_mux_dataout, wire_l3_w1_n3_mux_dataout, wire_l3_w1_n2_mux_dataout, wire_l3_w1_n1_mux_dataout, wire_l3_w1_n0_mux_dataout, wire_l3_w0_n3_mux_dataout, wire_l3_w0_n2_mux_dataout, wire_l3_w0_n1_mux_dataout, wire_l3_w0_n0_mux_dataout, wire_l2_w15_n7_mux_dataout, wire_l2_w15_n6_mux_dataout, wire_l2_w15_n5_mux_dataout, wire_l2_w15_n4_mux_dataout, wire_l2_w15_n3_mux_dataout, wire_l2_w15_n2_mux_dataout, wire_l2_w15_n1_mux_dataout, wire_l2_w15_n0_mux_dataout, wire_l2_w14_n7_mux_dataout, wire_l2_w14_n6_mux_dataout, wire_l2_w14_n5_mux_dataout, wire_l2_w14_n4_mux_dataout, wire_l2_w14_n3_mux_dataout, wire_l2_w14_n2_mux_dataout, wire_l2_w14_n1_mux_dataout, wire_l2_w14_n0_mux_dataout, wire_l2_w13_n7_mux_dataout, wire_l2_w13_n6_mux_dataout, wire_l2_w13_n5_mux_dataout, wire_l2_w13_n4_mux_dataout, wire_l2_w13_n3_mux_dataout, wire_l2_w13_n2_mux_dataout, wire_l2_w13_n1_mux_dataout, wire_l2_w13_n0_mux_dataout, wire_l2_w12_n7_mux_dataout, wire_l2_w12_n6_mux_dataout, wire_l2_w12_n5_mux_dataout, wire_l2_w12_n4_mux_dataout, wire_l2_w12_n3_mux_dataout, wire_l2_w12_n2_mux_dataout, wire_l2_w12_n1_mux_dataout, wire_l2_w12_n0_mux_dataout, wire_l2_w11_n7_mux_dataout, wire_l2_w11_n6_mux_dataout, wire_l2_w11_n5_mux_dataout, wire_l2_w11_n4_mux_dataout, wire_l2_w11_n3_mux_dataout, wire_l2_w11_n2_mux_dataout, wire_l2_w11_n1_mux_dataout, wire_l2_w11_n0_mux_dataout, wire_l2_w10_n7_mux_dataout, wire_l2_w10_n6_mux_dataout, wire_l2_w10_n5_mux_dataout, wire_l2_w10_n4_mux_dataout, wire_l2_w10_n3_mux_dataout, wire_l2_w10_n2_mux_dataout, wire_l2_w10_n1_mux_dataout, wire_l2_w10_n0_mux_dataout, wire_l2_w9_n7_mux_dataout, wire_l2_w9_n6_mux_dataout, wire_l2_w9_n5_mux_dataout, wire_l2_w9_n4_mux_dataout, wire_l2_w9_n3_mux_dataout
, wire_l2_w9_n2_mux_dataout, wire_l2_w9_n1_mux_dataout, wire_l2_w9_n0_mux_dataout, wire_l2_w8_n7_mux_dataout, wire_l2_w8_n6_mux_dataout, wire_l2_w8_n5_mux_dataout, wire_l2_w8_n4_mux_dataout, wire_l2_w8_n3_mux_dataout, wire_l2_w8_n2_mux_dataout, wire_l2_w8_n1_mux_dataout, wire_l2_w8_n0_mux_dataout, wire_l2_w7_n7_mux_dataout, wire_l2_w7_n6_mux_dataout, wire_l2_w7_n5_mux_dataout, wire_l2_w7_n4_mux_dataout, wire_l2_w7_n3_mux_dataout, wire_l2_w7_n2_mux_dataout, wire_l2_w7_n1_mux_dataout, wire_l2_w7_n0_mux_dataout, wire_l2_w6_n7_mux_dataout, wire_l2_w6_n6_mux_dataout, wire_l2_w6_n5_mux_dataout, wire_l2_w6_n4_mux_dataout, wire_l2_w6_n3_mux_dataout, wire_l2_w6_n2_mux_dataout, wire_l2_w6_n1_mux_dataout, wire_l2_w6_n0_mux_dataout, wire_l2_w5_n7_mux_dataout, wire_l2_w5_n6_mux_dataout, wire_l2_w5_n5_mux_dataout, wire_l2_w5_n4_mux_dataout, wire_l2_w5_n3_mux_dataout, wire_l2_w5_n2_mux_dataout, wire_l2_w5_n1_mux_dataout, wire_l2_w5_n0_mux_dataout, wire_l2_w4_n7_mux_dataout, wire_l2_w4_n6_mux_dataout, wire_l2_w4_n5_mux_dataout, wire_l2_w4_n4_mux_dataout, wire_l2_w4_n3_mux_dataout, wire_l2_w4_n2_mux_dataout, wire_l2_w4_n1_mux_dataout, wire_l2_w4_n0_mux_dataout, wire_l2_w3_n7_mux_dataout, wire_l2_w3_n6_mux_dataout, wire_l2_w3_n5_mux_dataout, wire_l2_w3_n4_mux_dataout, wire_l2_w3_n3_mux_dataout, wire_l2_w3_n2_mux_dataout, wire_l2_w3_n1_mux_dataout, wire_l2_w3_n0_mux_dataout, wire_l2_w2_n7_mux_dataout, wire_l2_w2_n6_mux_dataout, wire_l2_w2_n5_mux_dataout, wire_l2_w2_n4_mux_dataout, wire_l2_w2_n3_mux_dataout, wire_l2_w2_n2_mux_dataout, wire_l2_w2_n1_mux_dataout, wire_l2_w2_n0_mux_dataout, wire_l2_w1_n7_mux_dataout, wire_l2_w1_n6_mux_dataout, wire_l2_w1_n5_mux_dataout, wire_l2_w1_n4_mux_dataout, wire_l2_w1_n3_mux_dataout, wire_l2_w1_n2_mux_dataout, wire_l2_w1_n1_mux_dataout, wire_l2_w1_n0_mux_dataout, wire_l2_w0_n7_mux_dataout, wire_l2_w0_n6_mux_dataout, wire_l2_w0_n5_mux_dataout, wire_l2_w0_n4_mux_dataout, wire_l2_w0_n3_mux_dataout, wire_l2_w0_n2_mux_dataout, wire_l2_w0_n1_mux_dataout, wire_l2_w0_n0_mux_dataout, wire_l1_w15_n15_mux_dataout
, wire_l1_w15_n14_mux_dataout, wire_l1_w15_n13_mux_dataout, wire_l1_w15_n12_mux_dataout, wire_l1_w15_n11_mux_dataout, wire_l1_w15_n10_mux_dataout, wire_l1_w15_n9_mux_dataout, wire_l1_w15_n8_mux_dataout, wire_l1_w15_n7_mux_dataout, wire_l1_w15_n6_mux_dataout, wire_l1_w15_n5_mux_dataout, wire_l1_w15_n4_mux_dataout, wire_l1_w15_n3_mux_dataout, wire_l1_w15_n2_mux_dataout, wire_l1_w15_n1_mux_dataout, wire_l1_w15_n0_mux_dataout, wire_l1_w14_n15_mux_dataout, wire_l1_w14_n14_mux_dataout, wire_l1_w14_n13_mux_dataout, wire_l1_w14_n12_mux_dataout, wire_l1_w14_n11_mux_dataout, wire_l1_w14_n10_mux_dataout, wire_l1_w14_n9_mux_dataout, wire_l1_w14_n8_mux_dataout, wire_l1_w14_n7_mux_dataout, wire_l1_w14_n6_mux_dataout, wire_l1_w14_n5_mux_dataout, wire_l1_w14_n4_mux_dataout, wire_l1_w14_n3_mux_dataout, wire_l1_w14_n2_mux_dataout, wire_l1_w14_n1_mux_dataout, wire_l1_w14_n0_mux_dataout, wire_l1_w13_n15_mux_dataout, wire_l1_w13_n14_mux_dataout, wire_l1_w13_n13_mux_dataout, wire_l1_w13_n12_mux_dataout, wire_l1_w13_n11_mux_dataout, wire_l1_w13_n10_mux_dataout, wire_l1_w13_n9_mux_dataout, wire_l1_w13_n8_mux_dataout, wire_l1_w13_n7_mux_dataout, wire_l1_w13_n6_mux_dataout, wire_l1_w13_n5_mux_dataout, wire_l1_w13_n4_mux_dataout, wire_l1_w13_n3_mux_dataout, wire_l1_w13_n2_mux_dataout, wire_l1_w13_n1_mux_dataout, wire_l1_w13_n0_mux_dataout, wire_l1_w12_n15_mux_dataout, wire_l1_w12_n14_mux_dataout, wire_l1_w12_n13_mux_dataout, wire_l1_w12_n12_mux_dataout, wire_l1_w12_n11_mux_dataout, wire_l1_w12_n10_mux_dataout, wire_l1_w12_n9_mux_dataout, wire_l1_w12_n8_mux_dataout, wire_l1_w12_n7_mux_dataout, wire_l1_w12_n6_mux_dataout, wire_l1_w12_n5_mux_dataout, wire_l1_w12_n4_mux_dataout, wire_l1_w12_n3_mux_dataout, wire_l1_w12_n2_mux_dataout, wire_l1_w12_n1_mux_dataout, wire_l1_w12_n0_mux_dataout, wire_l1_w11_n15_mux_dataout, wire_l1_w11_n14_mux_dataout, wire_l1_w11_n13_mux_dataout, wire_l1_w11_n12_mux_dataout, wire_l1_w11_n11_mux_dataout, wire_l1_w11_n10_mux_dataout, wire_l1_w11_n9_mux_dataout, wire_l1_w11_n8_mux_dataout, wire_l1_w11_n7_mux_dataout, wire_l1_w11_n6_mux_dataout
, wire_l1_w11_n5_mux_dataout, wire_l1_w11_n4_mux_dataout, wire_l1_w11_n3_mux_dataout, wire_l1_w11_n2_mux_dataout, wire_l1_w11_n1_mux_dataout, wire_l1_w11_n0_mux_dataout, wire_l1_w10_n15_mux_dataout, wire_l1_w10_n14_mux_dataout, wire_l1_w10_n13_mux_dataout, wire_l1_w10_n12_mux_dataout, wire_l1_w10_n11_mux_dataout, wire_l1_w10_n10_mux_dataout, wire_l1_w10_n9_mux_dataout, wire_l1_w10_n8_mux_dataout, wire_l1_w10_n7_mux_dataout, wire_l1_w10_n6_mux_dataout, wire_l1_w10_n5_mux_dataout, wire_l1_w10_n4_mux_dataout, wire_l1_w10_n3_mux_dataout, wire_l1_w10_n2_mux_dataout, wire_l1_w10_n1_mux_dataout, wire_l1_w10_n0_mux_dataout, wire_l1_w9_n15_mux_dataout, wire_l1_w9_n14_mux_dataout, wire_l1_w9_n13_mux_dataout, wire_l1_w9_n12_mux_dataout, wire_l1_w9_n11_mux_dataout, wire_l1_w9_n10_mux_dataout, wire_l1_w9_n9_mux_dataout, wire_l1_w9_n8_mux_dataout, wire_l1_w9_n7_mux_dataout, wire_l1_w9_n6_mux_dataout, wire_l1_w9_n5_mux_dataout, wire_l1_w9_n4_mux_dataout, wire_l1_w9_n3_mux_dataout, wire_l1_w9_n2_mux_dataout, wire_l1_w9_n1_mux_dataout, wire_l1_w9_n0_mux_dataout, wire_l1_w8_n15_mux_dataout, wire_l1_w8_n14_mux_dataout, wire_l1_w8_n13_mux_dataout, wire_l1_w8_n12_mux_dataout, wire_l1_w8_n11_mux_dataout, wire_l1_w8_n10_mux_dataout, wire_l1_w8_n9_mux_dataout, wire_l1_w8_n8_mux_dataout, wire_l1_w8_n7_mux_dataout, wire_l1_w8_n6_mux_dataout, wire_l1_w8_n5_mux_dataout, wire_l1_w8_n4_mux_dataout, wire_l1_w8_n3_mux_dataout, wire_l1_w8_n2_mux_dataout, wire_l1_w8_n1_mux_dataout, wire_l1_w8_n0_mux_dataout, wire_l1_w7_n15_mux_dataout, wire_l1_w7_n14_mux_dataout, wire_l1_w7_n13_mux_dataout, wire_l1_w7_n12_mux_dataout, wire_l1_w7_n11_mux_dataout, wire_l1_w7_n10_mux_dataout, wire_l1_w7_n9_mux_dataout, wire_l1_w7_n8_mux_dataout, wire_l1_w7_n7_mux_dataout, wire_l1_w7_n6_mux_dataout, wire_l1_w7_n5_mux_dataout, wire_l1_w7_n4_mux_dataout, wire_l1_w7_n3_mux_dataout, wire_l1_w7_n2_mux_dataout, wire_l1_w7_n1_mux_dataout, wire_l1_w7_n0_mux_dataout, wire_l1_w6_n15_mux_dataout, wire_l1_w6_n14_mux_dataout, wire_l1_w6_n13_mux_dataout, wire_l1_w6_n12_mux_dataout
, wire_l1_w6_n11_mux_dataout, wire_l1_w6_n10_mux_dataout, wire_l1_w6_n9_mux_dataout, wire_l1_w6_n8_mux_dataout, wire_l1_w6_n7_mux_dataout, wire_l1_w6_n6_mux_dataout, wire_l1_w6_n5_mux_dataout, wire_l1_w6_n4_mux_dataout, wire_l1_w6_n3_mux_dataout, wire_l1_w6_n2_mux_dataout, wire_l1_w6_n1_mux_dataout, wire_l1_w6_n0_mux_dataout, wire_l1_w5_n15_mux_dataout, wire_l1_w5_n14_mux_dataout, wire_l1_w5_n13_mux_dataout, wire_l1_w5_n12_mux_dataout, wire_l1_w5_n11_mux_dataout, wire_l1_w5_n10_mux_dataout, wire_l1_w5_n9_mux_dataout, wire_l1_w5_n8_mux_dataout, wire_l1_w5_n7_mux_dataout, wire_l1_w5_n6_mux_dataout, wire_l1_w5_n5_mux_dataout, wire_l1_w5_n4_mux_dataout, wire_l1_w5_n3_mux_dataout, wire_l1_w5_n2_mux_dataout, wire_l1_w5_n1_mux_dataout, wire_l1_w5_n0_mux_dataout, wire_l1_w4_n15_mux_dataout, wire_l1_w4_n14_mux_dataout, wire_l1_w4_n13_mux_dataout, wire_l1_w4_n12_mux_dataout, wire_l1_w4_n11_mux_dataout, wire_l1_w4_n10_mux_dataout, wire_l1_w4_n9_mux_dataout, wire_l1_w4_n8_mux_dataout, wire_l1_w4_n7_mux_dataout, wire_l1_w4_n6_mux_dataout, wire_l1_w4_n5_mux_dataout, wire_l1_w4_n4_mux_dataout, wire_l1_w4_n3_mux_dataout, wire_l1_w4_n2_mux_dataout, wire_l1_w4_n1_mux_dataout, wire_l1_w4_n0_mux_dataout, wire_l1_w3_n15_mux_dataout, wire_l1_w3_n14_mux_dataout, wire_l1_w3_n13_mux_dataout, wire_l1_w3_n12_mux_dataout, wire_l1_w3_n11_mux_dataout, wire_l1_w3_n10_mux_dataout, wire_l1_w3_n9_mux_dataout, wire_l1_w3_n8_mux_dataout, wire_l1_w3_n7_mux_dataout, wire_l1_w3_n6_mux_dataout, wire_l1_w3_n5_mux_dataout, wire_l1_w3_n4_mux_dataout, wire_l1_w3_n3_mux_dataout, wire_l1_w3_n2_mux_dataout, wire_l1_w3_n1_mux_dataout, wire_l1_w3_n0_mux_dataout, wire_l1_w2_n15_mux_dataout, wire_l1_w2_n14_mux_dataout, wire_l1_w2_n13_mux_dataout, wire_l1_w2_n12_mux_dataout, wire_l1_w2_n11_mux_dataout, wire_l1_w2_n10_mux_dataout, wire_l1_w2_n9_mux_dataout, wire_l1_w2_n8_mux_dataout, wire_l1_w2_n7_mux_dataout, wire_l1_w2_n6_mux_dataout, wire_l1_w2_n5_mux_dataout, wire_l1_w2_n4_mux_dataout, wire_l1_w2_n3_mux_dataout, wire_l1_w2_n2_mux_dataout, wire_l1_w2_n1_mux_dataout
, wire_l1_w2_n0_mux_dataout, wire_l1_w1_n15_mux_dataout, wire_l1_w1_n14_mux_dataout, wire_l1_w1_n13_mux_dataout, wire_l1_w1_n12_mux_dataout, wire_l1_w1_n11_mux_dataout, wire_l1_w1_n10_mux_dataout, wire_l1_w1_n9_mux_dataout, wire_l1_w1_n8_mux_dataout, wire_l1_w1_n7_mux_dataout, wire_l1_w1_n6_mux_dataout, wire_l1_w1_n5_mux_dataout, wire_l1_w1_n4_mux_dataout, wire_l1_w1_n3_mux_dataout, wire_l1_w1_n2_mux_dataout, wire_l1_w1_n1_mux_dataout, wire_l1_w1_n0_mux_dataout, wire_l1_w0_n15_mux_dataout, wire_l1_w0_n14_mux_dataout, wire_l1_w0_n13_mux_dataout, wire_l1_w0_n12_mux_dataout, wire_l1_w0_n11_mux_dataout, wire_l1_w0_n10_mux_dataout, wire_l1_w0_n9_mux_dataout, wire_l1_w0_n8_mux_dataout, wire_l1_w0_n7_mux_dataout, wire_l1_w0_n6_mux_dataout, wire_l1_w0_n5_mux_dataout, wire_l1_w0_n4_mux_dataout, wire_l1_w0_n3_mux_dataout, wire_l1_w0_n2_mux_dataout, wire_l1_w0_n1_mux_dataout, wire_l1_w0_n0_mux_dataout, data},
		result = external_reg,
		result_wire_ext = {wire_l5_w15_n0_mux_dataout, wire_l5_w14_n0_mux_dataout, wire_l5_w13_n0_mux_dataout, wire_l5_w12_n0_mux_dataout, wire_l5_w11_n0_mux_dataout, wire_l5_w10_n0_mux_dataout, wire_l5_w9_n0_mux_dataout, wire_l5_w8_n0_mux_dataout, wire_l5_w7_n0_mux_dataout, wire_l5_w6_n0_mux_dataout, wire_l5_w5_n0_mux_dataout, wire_l5_w4_n0_mux_dataout, wire_l5_w3_n0_mux_dataout, wire_l5_w2_n0_mux_dataout, wire_l5_w1_n0_mux_dataout, wire_l5_w0_n0_mux_dataout},
		sel_wire = {sel[4], {5{1'b0}}, sel[3], {5{1'b0}}, sel[2], {5{1'b0}}, sel[1], {5{1'b0}}, sel[0]};
endmodule //altfp_inv_ex_mux

//synthesis_resources = dsp_18bit 16 lut 391 reg 765 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_inv_ex_altfp_inv
	( 
	clk_en,
	clock,
	data,
	result) /* synthesis synthesis_clearbox=1 */;
	input   clk_en;
	input   clock;
	input   [31:0]  data;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clk_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_altfp_inv_and_or2_result;
	wire  wire_altfp_inv_and_or3_result;
	wire  wire_altfp_inv_and_or4_result;
	wire  wire_altfp_inv_and_or5_result;
	wire  [25:0]   wire_diff_adder_0_result;
	wire  [25:0]   wire_diff_adder_1_result;
	wire  [12:0]   wire_slope_r1c1_add_result;
	wire  [12:0]   wire_slope_r1c2_add_result;
	wire  [12:0]   wire_slope_r1c3_add_result;
	wire  [12:0]   wire_slope_r2c1_add_result;
	wire  [12:0]   wire_slope_r2c2_add_result;
	wire  [12:0]   wire_slope_r3c1_add_result;
	reg	[12:0]	and_dffe_0;
	reg	[12:0]	and_dffe_1;
	reg	[12:0]	and_dffe_2;
	reg	[12:0]	and_dffe_3;
	reg	[12:0]	and_dffe_4;
	reg	[12:0]	and_dffe_5;
	reg	[2:0]	division_by_zero_dffe;
	reg	[7:0]	exp_dffe1_0;
	reg	[7:0]	exp_dffe1_1;
	reg	[7:0]	exp_dffe1_10;
	reg	[7:0]	exp_dffe1_11;
	reg	[7:0]	exp_dffe1_12;
	reg	[7:0]	exp_dffe1_13;
	reg	[7:0]	exp_dffe1_14;
	reg	[7:0]	exp_dffe1_2;
	reg	[7:0]	exp_dffe1_3;
	reg	[7:0]	exp_dffe1_4;
	reg	[7:0]	exp_dffe1_5;
	reg	[7:0]	exp_dffe1_6;
	reg	[7:0]	exp_dffe1_7;
	reg	[7:0]	exp_dffe1_8;
	reg	[7:0]	exp_dffe1_9;
	reg	[7:0]	exp_dffe2_0;
	reg	[7:0]	exp_dffe2_1;
	reg	[7:0]	exp_dffe2_2;
	reg	[2:0]	infinite_dffe;
	reg	infinite_input_dffe;
	reg	[9:0]	intercept_dffe;
	reg	[22:0]	man_dffe_0;
	reg	[22:0]	man_dffe_1;
	reg	[22:0]	man_dffe_10;
	reg	[22:0]	man_dffe_11;
	reg	[22:0]	man_dffe_2;
	reg	[22:0]	man_dffe_3;
	reg	[22:0]	man_dffe_4;
	reg	[22:0]	man_dffe_5;
	reg	[22:0]	man_dffe_6;
	reg	[22:0]	man_dffe_7;
	reg	[22:0]	man_dffe_8;
	reg	[22:0]	man_dffe_9;
	reg	[2:0]	nan_dffe;
	reg	nan_input_dffe;
	reg	[31:0]	result_output_dffe;
	reg	[18:0]	sign_dffe;
	reg	[2:0]	underflow_dffe;
	reg	[12:0]	x_dffe_0;
	reg	[12:0]	x_dffe_1;
	reg	[12:0]	x_dffe_2;
	reg	[12:0]	x_dffe_3;
	reg	[24:0]	x_dffe_4;
	reg	[24:0]	x_dffe_5;
	reg	[24:0]	x_dffe_6;
	reg	[24:0]	x_dffe_7;
	reg	[2:0]	zero_dffe;
	reg	zero_input_dffe;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[6:0]	wire_approx_sub_pipeline_dffe_Q;
	wire	[6:0]	wire_approx_sub_pipeline_dffe_D;
	wire	[6:0]	wire_approx_sub_result_int;
	wire	wire_approx_sub_aclr;
	wire	wire_approx_sub_clken;
	wire	wire_approx_sub_clock;
	wire	[6:0]	wire_approx_sub_dataa;
	wire	[6:0]	wire_approx_sub_datab;
	wire	[6:0]	wire_approx_sub_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[8:0]	wire_bias_adjustment_pipeline_dffe_Q;
	wire	[8:0]	wire_bias_adjustment_pipeline_dffe_D;
	wire	[8:0]	wire_bias_adjustment_result_int;
	wire	wire_bias_adjustment_aclr;
	wire	wire_bias_adjustment_clken;
	wire	wire_bias_adjustment_clock;
	wire	[8:0]	wire_bias_adjustment_dataa;
	wire	[8:0]	wire_bias_adjustment_datab;
	wire	[8:0]	wire_bias_adjustment_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[12:0]	wire_modified_add_pipeline_dffe_Q;
	wire	[12:0]	wire_modified_add_pipeline_dffe_D;
	wire	[12:0]	wire_modified_add_result_int;
	wire	wire_modified_add_aclr;
	wire	wire_modified_add_clken;
	wire	wire_modified_add_clock;
	wire	[12:0]	wire_modified_add_dataa;
	wire	[12:0]	wire_modified_add_datab;
	wire	[12:0]	wire_modified_add_result;
	reg	wire_cmpr6_aeb_int;
	reg	wire_cmpr6_agb_int;
	wire	wire_cmpr6_aclr;
	wire	wire_cmpr6_ageb;
	wire	wire_cmpr6_clken;
	wire	wire_cmpr6_clock;
	wire	[8:0]	wire_cmpr6_dataa;
	wire	[8:0]	wire_cmpr6_datab;
	wire	[0:0]	wire_cmpr6_ageb_reg_D;
	reg	[0:0]	wire_cmpr6_ageb_reg_Q;
	wire  [36:0]   wire_inner_mult0_result;
	wire  [48:0]   wire_inner_mult1_result;
	wire  [37:0]   wire_outer_mult0_result;
	wire  [49:0]   wire_outer_mult1_result;
	wire  [15:0]   wire_mux1_result;
	wire aclr;
	wire  [29:0]  and_b0_w;
	wire  [29:0]  and_b1_w;
	wire  [29:0]  and_b2_w;
	wire  [29:0]  and_b3_w;
	wire  [29:0]  and_b4_w;
	wire  [29:0]  and_b5_w;
	wire  [6:0]  approx_c_w;
	wire  [6:0]  approx_mx_w;
	wire  [12:0]  approx_y_w;
	wire  [12:0]  c_offset_w;
	wire  [25:0]  const_2_w;
	wire  [8:0]  const_bias_adj_greater_one_w;
	wire  [8:0]  const_bias_adj_one_w;
	wire  [8:0]  const_bias_adj_w;
	wire  [7:0]  data_exp_bus_w;
	wire  [22:0]  data_man_bus_w;
	wire  data_sign_w;
	wire  division_by_zero_w;
	wire  exp_and_msb_w;
	wire  [7:0]  exp_bus_w;
	wire  [7:0]  exp_exc_ones_w;
	wire  [7:0]  exp_exc_zeros_w;
	wire  exp_one_w;
	wire  exp_or_msb_w;
	wire  [7:0]  exp_res_w;
	wire  exp_zero_w;
	wire  gnd_w;
	wire  [31:0]  infi_res_w;
	wire  infinite_input_w;
	wire  infinite_out_w;
	wire  infinite_w;
	wire  man_and_msb_w;
	wire  [22:0]  man_bus_w;
	wire  [22:0]  man_exc_nan_w;
	wire  [22:0]  man_exc_zeros_w;
	wire  man_non_zero_w;
	wire  man_one_w;
	wire  man_or_msb_w;
	wire  [23:0]  man_out_0_w;
	wire  [23:0]  man_out_1_w;
	wire  [22:0]  man_res_w;
	wire  man_zero_w;
	wire  [12:0]  modified_c_w;
	wire  [31:0]  mux_1_res_w;
	wire  [31:0]  mux_2_res_w;
	wire  [31:0]  mux_3_res_w;
	wire  nan_input_w;
	wire  nan_out_w;
	wire  [31:0]  nan_res_w;
	wire  nan_w;
	wire  [31:0]  norm_res_int_w;
	wire  [29:0]  shift_b0_w;
	wire  [29:0]  shift_b1_w;
	wire  [29:0]  shift_b2_w;
	wire  [29:0]  shift_b3_w;
	wire  [29:0]  shift_b4_w;
	wire  [29:0]  shift_b5_w;
	wire  sign_exc_bit_w;
	wire  sign_res_w;
	wire  [5:0]  slope_w;
	wire  [511:0]  table_bus_full_w;
	wire  underflow_w;
	wire  vcc_w;
	wire  [12:0]  x_0_w;
	wire  [24:0]  x_1_w;
	wire  [24:0]  x_2_w;
	wire  [12:0]  x_initial_w;
	wire  zero_input_w;
	wire  zero_out_w;
	wire  [31:0]  zero_res_w;
	wire  zero_w;

	altfp_inv_ex_altfp_inv_and_or   altfp_inv_and_or2
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(man_bus_w),
	.result(wire_altfp_inv_and_or2_result));
	altfp_inv_ex_altfp_inv_and_or1   altfp_inv_and_or3
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(man_bus_w),
	.result(wire_altfp_inv_and_or3_result));
	altfp_inv_ex_altfp_inv_and_or12   altfp_inv_and_or4
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(exp_bus_w),
	.result(wire_altfp_inv_and_or4_result));
	altfp_inv_ex_altfp_inv_and_or123   altfp_inv_and_or5
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(exp_bus_w),
	.result(wire_altfp_inv_and_or5_result));
	altfp_inv_ex_altfp_inv_csa   diff_adder_0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(const_2_w[25:0]),
	.datab(wire_inner_mult0_result[36:11]),
	.result(wire_diff_adder_0_result));
	altfp_inv_ex_altfp_inv_csa   diff_adder_1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(const_2_w[25:0]),
	.datab(wire_inner_mult1_result[48:23]),
	.result(wire_diff_adder_1_result));
	altfp_inv_ex_altfp_inv_csa1   slope_r1c1_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(and_dffe_0),
	.datab(and_dffe_1),
	.result(wire_slope_r1c1_add_result));
	altfp_inv_ex_altfp_inv_csa1   slope_r1c2_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(and_dffe_2),
	.datab(and_dffe_3),
	.result(wire_slope_r1c2_add_result));
	altfp_inv_ex_altfp_inv_csa1   slope_r1c3_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(and_dffe_4),
	.datab(and_dffe_5),
	.result(wire_slope_r1c3_add_result));
	altfp_inv_ex_altfp_inv_csa1   slope_r2c1_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_slope_r1c1_add_result),
	.datab(wire_slope_r1c2_add_result),
	.result(wire_slope_r2c1_add_result));
	altfp_inv_ex_altfp_inv_csa12   slope_r2c2_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(modified_c_w),
	.datab(wire_slope_r1c3_add_result),
	.result(wire_slope_r2c2_add_result));
	altfp_inv_ex_altfp_inv_csa12   slope_r3c1_add
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_slope_r2c2_add_result),
	.datab(wire_slope_r2c1_add_result),
	.result(wire_slope_r3c1_add_result));
	// synopsys translate_off
	initial
		and_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_0 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_0 <= and_b0_w[29:17];
	// synopsys translate_off
	initial
		and_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_1 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_1 <= and_b1_w[29:17];
	// synopsys translate_off
	initial
		and_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_2 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_2 <= and_b2_w[29:17];
	// synopsys translate_off
	initial
		and_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_3 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_3 <= and_b3_w[29:17];
	// synopsys translate_off
	initial
		and_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_4 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_4 <= and_b4_w[29:17];
	// synopsys translate_off
	initial
		and_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_dffe_5 <= 13'b0;
		else if  (clk_en == 1'b1)   and_dffe_5 <= and_b5_w[29:17];
	// synopsys translate_off
	initial
		division_by_zero_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) division_by_zero_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   division_by_zero_dffe <= {division_by_zero_dffe[1:0], division_by_zero_w};
	// synopsys translate_off
	initial
		exp_dffe1_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_0 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_0 <= data_exp_bus_w;
	// synopsys translate_off
	initial
		exp_dffe1_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_1 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_1 <= exp_dffe1_0;
	// synopsys translate_off
	initial
		exp_dffe1_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_10 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_10 <= exp_dffe1_9;
	// synopsys translate_off
	initial
		exp_dffe1_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_11 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_11 <= exp_dffe1_10;
	// synopsys translate_off
	initial
		exp_dffe1_12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_12 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_12 <= exp_dffe1_11;
	// synopsys translate_off
	initial
		exp_dffe1_13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_13 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_13 <= exp_dffe1_12;
	// synopsys translate_off
	initial
		exp_dffe1_14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_14 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_14 <= exp_dffe1_13;
	// synopsys translate_off
	initial
		exp_dffe1_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_2 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_2 <= exp_dffe1_1;
	// synopsys translate_off
	initial
		exp_dffe1_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_3 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_3 <= exp_dffe1_2;
	// synopsys translate_off
	initial
		exp_dffe1_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_4 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_4 <= exp_dffe1_3;
	// synopsys translate_off
	initial
		exp_dffe1_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_5 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_5 <= exp_dffe1_4;
	// synopsys translate_off
	initial
		exp_dffe1_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_6 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_6 <= exp_dffe1_5;
	// synopsys translate_off
	initial
		exp_dffe1_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_7 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_7 <= exp_dffe1_6;
	// synopsys translate_off
	initial
		exp_dffe1_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_8 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_8 <= exp_dffe1_7;
	// synopsys translate_off
	initial
		exp_dffe1_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1_9 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe1_9 <= exp_dffe1_8;
	// synopsys translate_off
	initial
		exp_dffe2_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2_0 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe2_0 <= wire_bias_adjustment_result[7:0];
	// synopsys translate_off
	initial
		exp_dffe2_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2_1 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe2_1 <= exp_dffe2_0;
	// synopsys translate_off
	initial
		exp_dffe2_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2_2 <= 8'b0;
		else if  (clk_en == 1'b1)   exp_dffe2_2 <= exp_dffe2_1;
	// synopsys translate_off
	initial
		infinite_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   infinite_dffe <= {infinite_dffe[1:0], infinite_w};
	// synopsys translate_off
	initial
		infinite_input_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_input_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_input_dffe <= (exp_one_w & man_zero_w);
	// synopsys translate_off
	initial
		intercept_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) intercept_dffe <= 10'b0;
		else if  (clk_en == 1'b1)   intercept_dffe <= wire_mux1_result[9:0];
	// synopsys translate_off
	initial
		man_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_0 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_0 <= data_man_bus_w;
	// synopsys translate_off
	initial
		man_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_1 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_1 <= man_dffe_0;
	// synopsys translate_off
	initial
		man_dffe_10 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_10 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_10 <= man_dffe_9;
	// synopsys translate_off
	initial
		man_dffe_11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_11 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_11 <= man_dffe_10;
	// synopsys translate_off
	initial
		man_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_2 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_2 <= man_dffe_1;
	// synopsys translate_off
	initial
		man_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_3 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_3 <= man_dffe_2;
	// synopsys translate_off
	initial
		man_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_4 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_4 <= man_dffe_3;
	// synopsys translate_off
	initial
		man_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_5 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_5 <= man_dffe_4;
	// synopsys translate_off
	initial
		man_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_6 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_6 <= man_dffe_5;
	// synopsys translate_off
	initial
		man_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_7 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_7 <= man_dffe_6;
	// synopsys translate_off
	initial
		man_dffe_8 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_8 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_8 <= man_dffe_7;
	// synopsys translate_off
	initial
		man_dffe_9 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe_9 <= 23'b0;
		else if  (clk_en == 1'b1)   man_dffe_9 <= man_dffe_8;
	// synopsys translate_off
	initial
		nan_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   nan_dffe <= {nan_dffe[1:0], nan_w};
	// synopsys translate_off
	initial
		nan_input_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) nan_input_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   nan_input_dffe <= (exp_one_w & (man_non_zero_w | man_one_w));
	// synopsys translate_off
	initial
		result_output_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) result_output_dffe <= 32'b0;
		else if  (clk_en == 1'b1)   result_output_dffe <= mux_3_res_w;
	// synopsys translate_off
	initial
		sign_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_dffe <= 19'b0;
		else if  (clk_en == 1'b1)   sign_dffe <= {sign_dffe[17:0], data_sign_w};
	// synopsys translate_off
	initial
		underflow_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) underflow_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   underflow_dffe <= {underflow_dffe[1:0], underflow_w};
	// synopsys translate_off
	initial
		x_dffe_0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_0 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_0 <= x_0_w;
	// synopsys translate_off
	initial
		x_dffe_1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_1 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_1 <= x_dffe_0;
	// synopsys translate_off
	initial
		x_dffe_2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_2 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_2 <= x_dffe_1;
	// synopsys translate_off
	initial
		x_dffe_3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_3 <= 13'b0;
		else if  (clk_en == 1'b1)   x_dffe_3 <= x_dffe_2;
	// synopsys translate_off
	initial
		x_dffe_4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_4 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_4 <= x_1_w;
	// synopsys translate_off
	initial
		x_dffe_5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_5 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_5 <= x_dffe_4;
	// synopsys translate_off
	initial
		x_dffe_6 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_6 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_6 <= x_dffe_5;
	// synopsys translate_off
	initial
		x_dffe_7 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) x_dffe_7 <= 25'b0;
		else if  (clk_en == 1'b1)   x_dffe_7 <= x_dffe_6;
	// synopsys translate_off
	initial
		zero_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_dffe <= 3'b0;
		else if  (clk_en == 1'b1)   zero_dffe <= {zero_dffe[1:0], zero_w};
	// synopsys translate_off
	initial
		zero_input_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_input_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   zero_input_dffe <= (exp_zero_w & ((man_one_w | man_non_zero_w) | man_zero_w));
	assign
		wire_approx_sub_result_int = wire_approx_sub_dataa - wire_approx_sub_datab;
	//synopsys translate_off
	initial
		wire_approx_sub_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_approx_sub_clock or posedge wire_approx_sub_aclr)
		if (wire_approx_sub_aclr == 1'b1) wire_approx_sub_pipeline_dffe_Q <= 7'b0;
		else if (wire_approx_sub_clken == 1'b1) wire_approx_sub_pipeline_dffe_Q <= wire_approx_sub_pipeline_dffe_D;
	assign
		wire_approx_sub_result = wire_approx_sub_pipeline_dffe_Q[6:0],
		wire_approx_sub_pipeline_dffe_D[6:0] = wire_approx_sub_result_int;
	assign
		wire_approx_sub_aclr = aclr,
		wire_approx_sub_clken = clk_en,
		wire_approx_sub_clock = clock,
		wire_approx_sub_dataa = approx_c_w,
		wire_approx_sub_datab = approx_mx_w;
	assign
		wire_bias_adjustment_result_int = wire_bias_adjustment_dataa - wire_bias_adjustment_datab;
	//synopsys translate_off
	initial
		wire_bias_adjustment_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_bias_adjustment_clock or posedge wire_bias_adjustment_aclr)
		if (wire_bias_adjustment_aclr == 1'b1) wire_bias_adjustment_pipeline_dffe_Q <= 9'b0;
		else if (wire_bias_adjustment_clken == 1'b1) wire_bias_adjustment_pipeline_dffe_Q <= wire_bias_adjustment_pipeline_dffe_D;
	assign
		wire_bias_adjustment_result = wire_bias_adjustment_pipeline_dffe_Q[8:0],
		wire_bias_adjustment_pipeline_dffe_D[8:0] = wire_bias_adjustment_result_int;
	assign
		wire_bias_adjustment_aclr = aclr,
		wire_bias_adjustment_clken = clk_en,
		wire_bias_adjustment_clock = clock,
		wire_bias_adjustment_dataa = const_bias_adj_w,
		wire_bias_adjustment_datab = {gnd_w, exp_dffe1_14};
	assign
		wire_modified_add_result_int = wire_modified_add_dataa - wire_modified_add_datab;
	//synopsys translate_off
	initial
		wire_modified_add_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_modified_add_clock or posedge wire_modified_add_aclr)
		if (wire_modified_add_aclr == 1'b1) wire_modified_add_pipeline_dffe_Q <= 13'b0;
		else if (wire_modified_add_clken == 1'b1) wire_modified_add_pipeline_dffe_Q <= wire_modified_add_pipeline_dffe_D;
	assign
		wire_modified_add_result = wire_modified_add_pipeline_dffe_Q[12:0],
		wire_modified_add_pipeline_dffe_D[12:0] = wire_modified_add_result_int;
	assign
		wire_modified_add_aclr = aclr,
		wire_modified_add_clken = clk_en,
		wire_modified_add_clock = clock,
		wire_modified_add_dataa = approx_y_w,
		wire_modified_add_datab = c_offset_w;
	always @(wire_cmpr6_dataa or wire_cmpr6_datab)
	begin
		if (wire_cmpr6_dataa == wire_cmpr6_datab) 
			begin
				wire_cmpr6_aeb_int = 1'b1;
			end
		else
			begin
				wire_cmpr6_aeb_int = 1'b0;
			end
		if (wire_cmpr6_dataa > wire_cmpr6_datab) 
			begin
				wire_cmpr6_agb_int = 1'b1;
			end
		else
			begin
				wire_cmpr6_agb_int = 1'b0;
			end
	end
	assign
		wire_cmpr6_ageb_reg_D[0:0] = wire_cmpr6_agb_int | wire_cmpr6_aeb_int,
		wire_cmpr6_ageb = wire_cmpr6_ageb_reg_Q[0:0];
	//synopsys translate_off
	initial
		begin
			wire_cmpr6_ageb_reg_Q = 0;
		end
	//synopsys translate_on
	always @(posedge wire_cmpr6_clock or posedge wire_cmpr6_aclr)
		if (wire_cmpr6_aclr == 1'b1) 
			begin
				wire_cmpr6_ageb_reg_Q <= 1'b0;
			end
		else 
		if (wire_cmpr6_clken == 1'b1)
			begin
				wire_cmpr6_ageb_reg_Q <= wire_cmpr6_ageb_reg_D;
			end
	assign
		wire_cmpr6_aclr = aclr,
		wire_cmpr6_clken = clk_en,
		wire_cmpr6_clock = clock,
		wire_cmpr6_dataa = {gnd_w, exp_dffe1_14},
		wire_cmpr6_datab = const_bias_adj_w;
	altfp_inv_ex_mult   inner_mult0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_out_0_w),
	.datab(x_0_w),
	.result(wire_inner_mult0_result));
	altfp_inv_ex_mult1   inner_mult1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_out_1_w),
	.datab(x_1_w),
	.result(wire_inner_mult1_result));
	altfp_inv_ex_mult12   outer_mult0
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_diff_adder_0_result[24:0]),
	.datab(x_dffe_3),
	.result(wire_outer_mult0_result));
	altfp_inv_ex_mult123   outer_mult1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.dataa(wire_diff_adder_1_result[24:0]),
	.datab(x_dffe_7),
	.result(wire_outer_mult1_result));
	altfp_inv_ex_mux   mux1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.data(table_bus_full_w),
	.result(wire_mux1_result),
	.sel(data_man_bus_w[22:18]));
	assign
		aclr = 1'b0,
		and_b0_w = ({30{slope_w[5]}} & shift_b0_w),
		and_b1_w = ({30{slope_w[4]}} & shift_b1_w),
		and_b2_w = ({30{slope_w[3]}} & shift_b2_w),
		and_b3_w = ({30{slope_w[2]}} & shift_b3_w),
		and_b4_w = ({30{slope_w[1]}} & shift_b4_w),
		and_b5_w = ({30{slope_w[0]}} & shift_b5_w),
		approx_c_w = 7'b1100000,
		approx_mx_w = {gnd_w, vcc_w, man_dffe_0[22:18]},
		approx_y_w = {wire_approx_sub_result[5:0], {7{gnd_w}}},
		c_offset_w = {{3{gnd_w}}, intercept_dffe},
		const_2_w = 26'b10000000000000000000000000,
		const_bias_adj_greater_one_w = 9'b011111101,
		const_bias_adj_one_w = 9'b011111110,
		const_bias_adj_w = (({9{(~ man_zero_w)}} & const_bias_adj_greater_one_w) | ({9{man_zero_w}} & const_bias_adj_one_w)),
		data_exp_bus_w = data[30:23],
		data_man_bus_w = data[22:0],
		data_sign_w = data[31],
		division_by_zero_w = zero_input_w,
		exp_and_msb_w = wire_altfp_inv_and_or5_result,
		exp_bus_w = exp_dffe1_11,
		exp_exc_ones_w = {8{1'b1}},
		exp_exc_zeros_w = {8{1'b0}},
		exp_one_w = exp_and_msb_w,
		exp_or_msb_w = wire_altfp_inv_and_or4_result,
		exp_res_w = exp_dffe2_2,
		exp_zero_w = (~ exp_or_msb_w),
		gnd_w = 1'b0,
		infi_res_w = {sign_exc_bit_w, exp_exc_ones_w, man_exc_zeros_w},
		infinite_input_w = infinite_input_dffe,
		infinite_out_w = infinite_dffe[2],
		infinite_w = zero_input_w,
		man_and_msb_w = wire_altfp_inv_and_or3_result,
		man_bus_w = man_dffe_11,
		man_exc_nan_w = {vcc_w, man_exc_zeros_w[21:0]},
		man_exc_zeros_w = {23{1'b0}},
		man_non_zero_w = man_or_msb_w,
		man_one_w = man_and_msb_w,
		man_or_msb_w = wire_altfp_inv_and_or2_result,
		man_out_0_w = {vcc_w, man_dffe_4[22:0]},
		man_out_1_w = {vcc_w, man_dffe_11[22:0]},
		man_res_w = x_2_w[22:0],
		man_zero_w = (~ man_or_msb_w),
		modified_c_w = wire_modified_add_result[12:0],
		mux_1_res_w = (({32{infinite_out_w}} & infi_res_w) | ({32{(~ infinite_out_w)}} & norm_res_int_w)),
		mux_2_res_w = (({32{zero_out_w}} & zero_res_w) | ({32{(~ zero_out_w)}} & mux_1_res_w)),
		mux_3_res_w = (({32{nan_out_w}} & nan_res_w) | ({32{(~ nan_out_w)}} & mux_2_res_w)),
		nan_input_w = nan_input_dffe,
		nan_out_w = nan_dffe[2],
		nan_res_w = {sign_exc_bit_w, exp_exc_ones_w, man_exc_nan_w},
		nan_w = nan_input_w,
		norm_res_int_w = {sign_res_w, exp_res_w, man_res_w},
		result = result_output_dffe,
		shift_b0_w = {gnd_w, vcc_w, man_dffe_0, {5{gnd_w}}},
		shift_b1_w = {{2{gnd_w}}, vcc_w, man_dffe_0, {4{gnd_w}}},
		shift_b2_w = {{3{gnd_w}}, vcc_w, man_dffe_0, {3{gnd_w}}},
		shift_b3_w = {{4{gnd_w}}, vcc_w, man_dffe_0, {2{gnd_w}}},
		shift_b4_w = {{5{gnd_w}}, vcc_w, man_dffe_0, gnd_w},
		shift_b5_w = {{6{gnd_w}}, vcc_w, man_dffe_0},
		sign_exc_bit_w = sign_res_w,
		sign_res_w = sign_dffe[18],
		slope_w = wire_mux1_result[15:10],
		table_bus_full_w = {16'b0100010000000001, 16'b0100010010000001, 16'b0100100010000111, 16'b0100100100000111, 16'b0100110100010000, 16'b0101000100011100, 16'b0101000110011100, 16'b0101010110101011, 16'b0101100110111100, 16'b0101110111010000, 16'b0101111001010001, 16'b0110001001100111, 16'b0110011001111111, 16'b0110101010011010, 16'b0110111010110111, 16'b0111001011010101, 16'b0111101010010111, 16'b0111111010111010, 16'b1000001011011111, 16'b1000101010101101, 16'b1000111011010101, 16'b1001011010101011, 16'b1001111010000101, 16'b1010001010110011, 16'b1010111001000101, 16'b1011011000101010, 16'b1011111000010011, 16'b1100100110110111, 16'b1101010101100001, 16'b1110000100010001, 16'b1110110011000110, 16'b1111110001000000},
		underflow_w = (((~ infinite_input_w) & (~ nan_input_w)) & wire_cmpr6_ageb),
		vcc_w = 1'b1,
		x_0_w = x_initial_w,
		x_1_w = wire_outer_mult0_result[36:12],
		x_2_w = wire_outer_mult1_result[48:24],
		x_initial_w = wire_slope_r3c1_add_result,
		zero_input_w = zero_input_dffe,
		zero_out_w = zero_dffe[2],
		zero_res_w = {sign_exc_bit_w, exp_exc_zeros_w, man_exc_zeros_w},
		zero_w = ((~ nan_input_w) & (infinite_input_w | underflow_w));
endmodule //altfp_inv_ex_altfp_inv
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module altfp_inv_ex (
	clk_en,
	clock,
	data,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clk_en;
	input	  clock;
	input	[31:0]  data;
	output	[31:0]  result;

	wire [31:0] sub_wire0;
	wire [31:0] result = sub_wire0[31:0];

	altfp_inv_ex_altfp_inv	altfp_inv_ex_altfp_inv_component (
				.clk_en (clk_en),
				.clock (clock),
				.data (data),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix III"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_HINT STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altfp_inv"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "20"
// Retrieval info: CONSTANT: ROUNDING STRING "TO_NEAREST"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "23"
// Retrieval info: USED_PORT: clk_en 0 0 0 0 INPUT NODEFVAL "clk_en"
// Retrieval info: CONNECT: @clk_en 0 0 0 0 clk_en 0 0 0 0
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: USED_PORT: data 0 0 32 0 INPUT NODEFVAL "data[31..0]"
// Retrieval info: CONNECT: @data 0 0 32 0 data 0 0 32 0
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex.v TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex.qip TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex.bsf FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex_inst.v FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex_bb.v FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex.inc FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_inv_ex.cmp FALSE TRUE
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX NUMERIC "1"
// Retrieval info: LIB_FILE: lpm
